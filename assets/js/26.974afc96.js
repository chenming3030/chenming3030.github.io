(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{749:function(a,_,v){a.exports=v.p+"assets/img/074.d7822768.jpg"},750:function(a,_,v){a.exports=v.p+"assets/img/075.293b004b.jpg"},789:function(a,_,v){"use strict";v.r(_);var t=v(65),s=Object(t.a)({},(function(){var a=this,_=a.$createElement,t=a._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"bio、nio、aio课程介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bio、nio、aio课程介绍"}},[a._v("#")]),a._v(" BIO、NIO、AIO课程介绍")]),a._v(" "),t("h2",{attrs:{id:"_1-课程说明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-课程说明"}},[a._v("#")]),a._v(" 1. 课程说明")]),a._v(" "),t("p",[a._v("在 Java 的软件设计开发中，通信架构是不可避免的，我们在进行不同系统或者不同进程之间的数据交互，或者在高并发下的通信场景下都需要用到网络通信相关的技术，对于一些经验丰富的程序员来说，Java 早期的网络通信架构存在一些缺陷，其中最令人恼火的是基于性能低下的 "),t("code",[a._v("同步阻塞式的 I/O 通信（BIO)")]),a._v("，随着互联网开发下通信性能的高要求，Java 在2002年开始支持了 "),t("code",[a._v("非阴塞式的 I/O 通信技术（NIO)")]),a._v("。")]),a._v(" "),t("p",[a._v("大多数读者在学习网络通信相关技术的时候，都只是接触到零碎的网络通信技术点，没有完整的技术体系架构，以至于对 Java 的通信场景总是没有清晰的解决方案。本次课程将通过大量清晰直接的案例，从最基础的 TCP "),t("code",[a._v("BIO")]),a._v(" 通信方式开始，介绍到 "),t("code",[a._v("NIO")]),a._v("、"),t("code",[a._v("AIO")]),a._v("，读者可以清晰的了解到 "),t("code",[a._v("阻塞")]),a._v("、"),t("code",[a._v("同步")]),a._v("、"),t("code",[a._v("异步")]),a._v(" 的现象、概念和特征以及优缺点。本课程结合了大量的案例让读者可以快速了解每种通信架构的使用。")]),a._v(" "),t("h2",{attrs:{id:"_2-学习要求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-学习要求"}},[a._v("#")]),a._v(" 2. 学习要求")]),a._v(" "),t("ul",[t("li",[a._v("本课程不太适合完全 0 基础学员")]),a._v(" "),t("li",[a._v("至少需要掌握：Java SE基础编程，如 Java 多线程，Java IO流编程，Java 网络基础知识（如：IP，端口，协议），常用的 Java 设计模式要有一定的了解")]),a._v(" "),t("li",[a._v("能熟练掌握 Java OOP 编程，有一定的编程思维")])]),a._v(" "),t("h2",{attrs:{id:"_3-通信技术整体解决的问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-通信技术整体解决的问题"}},[a._v("#")]),a._v(" 3. 通信技术整体解决的问题")]),a._v(" "),t("ul",[t("li",[a._v("局域网内的通信要求")]),a._v(" "),t("li",[a._v("多系统间的底层消息传递机制")]),a._v(" "),t("li",[a._v("高并发下，大数据量的通信场景需要，如 netty")]),a._v(" "),t("li",[a._v("游戏行业，无论是手游服务端，还是大型的网络游戏，Java语言都得到越来越广泛的应用")])]),a._v(" "),t("h2",{attrs:{id:"_4-java的i-o演进之路"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-java的i-o演进之路"}},[a._v("#")]),a._v(" 4. Java的I/O演进之路")]),a._v(" "),t("h3",{attrs:{id:"_4-1-i-o模型基本说明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-i-o模型基本说明"}},[a._v("#")]),a._v(" 4.1 I/O模型基本说明")]),a._v(" "),t("p",[a._v("I/O模型：就是用什么样的通道或者说是通信模式和架构进行数据的传输和接收，很大程度上决定了程序通信的性能，Java共支持3种网络编程的 I/O 模型："),t("code",[a._v("BIO")]),a._v("、"),t("code",[a._v("NIO")]),a._v("、"),t("code",[a._v("AIO")])]),a._v(" "),t("p",[a._v("实际通信需求下，要根据不同的业务场景和性能需求决定选择不同的I/O模型")]),a._v(" "),t("h3",{attrs:{id:"_4-2-bio"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-bio"}},[a._v("#")]),a._v(" 4.2 BIO")]),a._v(" "),t("p",[a._v("同步并阻塞（传统阻塞型），服务器实现模式为 "),t("code",[a._v("一个连接一个线程")]),a._v("，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销。")]),a._v(" "),t("img",{attrs:{height:"350px",src:v(749)}}),a._v(" "),t("br"),a._v(" "),t("h3",{attrs:{id:"_4-3-nio"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-nio"}},[a._v("#")]),a._v(" 4.3 NIO")]),a._v(" "),t("p",[a._v("同步非阻塞，服务器实现模式为 "),t("code",[a._v("一个线程处理多个请求（连接）")]),a._v("，即客户端发送的连接请求都会注 册到多路复用器上，多路复用器轮询到连接有 I/O 请求就进行处理。")]),a._v(" "),t("img",{attrs:{height:"350px",src:v(750)}}),a._v(" "),t("br"),a._v(" "),t("h3",{attrs:{id:"_4-4-aio"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-aio"}},[a._v("#")]),a._v(" 4.4 AIO")]),a._v(" "),t("p",[a._v("异步非阻塞，服务器实现模式为 "),t("code",[a._v("一个有效请求一个线程")]),a._v("，客户端的 I/O 请求都是由 OS 先接收，然后再通知服务器应用去启动线程进行处理，一般适用于连接数较多且连接时间较长的应用。")]),a._v(" "),t("h3",{attrs:{id:"_4-5-适用场景分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-适用场景分析"}},[a._v("#")]),a._v(" 4.5 适用场景分析")]),a._v(" "),t("ol",[t("li",[t("code",[a._v("BIO")]),a._v(" 方式适用于连接数目少且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4以前的唯一选择，但程序简单易理解")]),a._v(" "),t("li",[t("code",[a._v("NIO")]),a._v(" 方式适用于连接数目多且连接时间比较短（轻操作）的架构，比如聊天服务器，弹幕系统，服务器间通讯等。 编程比较复杂，JDK1.4开始支持")]),a._v(" "),t("li",[t("code",[a._v("AIO")]),a._v(" 方式使用于连接数目多且连接时间比较长（重操作）的架构，比如相册服务器，充分调用 OS 参与并发操作， 编程比较复杂，JDK7开始支持")])])])}),[],!1,null,null,null);_.default=s.exports}}]);