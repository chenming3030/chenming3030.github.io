(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{475:function(t,s,a){t.exports=a.p+"assets/img/13.b22cc0f0.png"},476:function(t,s,a){t.exports=a.p+"assets/img/14.39c626db.png"},477:function(t,s,a){t.exports=a.p+"assets/img/15.e8dd358c.png"},478:function(t,s,a){t.exports=a.p+"assets/img/16.a27184f3.png"},479:function(t,s,a){t.exports=a.p+"assets/img/17.901df447.png"},480:function(t,s,a){t.exports=a.p+"assets/img/18.3aabb3be.png"},481:function(t,s,a){t.exports=a.p+"assets/img/19.37d0242d.png"},482:function(t,s,a){t.exports=a.p+"assets/img/20.47462de9.png"},483:function(t,s,a){t.exports=a.p+"assets/img/22.79c8a528.png"},484:function(t,s,a){t.exports=a.p+"assets/img/24.f9095390.png"},485:function(t,s,a){t.exports=a.p+"assets/img/25.cb061719.png"},486:function(t,s,a){t.exports=a.p+"assets/img/26.7523eccb.png"},487:function(t,s,a){t.exports=a.p+"assets/img/27.b5e45bee.png"},488:function(t,s,a){t.exports=a.p+"assets/img/28.e0a75d9c.png"},489:function(t,s,a){t.exports=a.p+"assets/img/29.f247e006.png"},490:function(t,s,a){t.exports=a.p+"assets/img/30.b25b4554.png"},491:function(t,s,a){t.exports=a.p+"assets/img/31.a6476e8f.png"},492:function(t,s,a){t.exports=a.p+"assets/img/32.4b50bb68.png"},493:function(t,s,a){t.exports=a.p+"assets/img/33.a65c3dff.png"},494:function(t,s,a){t.exports=a.p+"assets/img/34.2fa0a9f9.png"},495:function(t,s,a){t.exports=a.p+"assets/img/35.67a88dde.png"},496:function(t,s,a){t.exports=a.p+"assets/img/36.d0122cf7.png"},497:function(t,s,a){t.exports=a.p+"assets/img/37.567ff17a.png"},498:function(t,s,a){t.exports=a.p+"assets/img/38.cc0dcf82.png"},499:function(t,s,a){t.exports=a.p+"assets/img/39.3e18b424.png"},500:function(t,s,a){t.exports=a.p+"assets/img/40.b1f1399e.png"},501:function(t,s,a){t.exports=a.p+"assets/img/41.fd635ffe.png"},502:function(t,s,a){t.exports=a.p+"assets/img/42.eef76c75.png"},503:function(t,s,a){t.exports=a.p+"assets/img/43.9c70eaa6.png"},504:function(t,s,a){t.exports=a.p+"assets/img/44.aab0378d.png"},505:function(t,s,a){t.exports=a.p+"assets/img/45.04c2103f.png"},506:function(t,s,a){t.exports=a.p+"assets/img/46.1e99f705.png"},507:function(t,s,a){t.exports=a.p+"assets/img/47.d994d2dc.png"},508:function(t,s,a){t.exports=a.p+"assets/img/48.bde34583.png"},509:function(t,s,a){t.exports=a.p+"assets/img/49.fc74cd8c.png"},510:function(t,s,a){t.exports=a.p+"assets/img/53.e7f13a6e.png"},511:function(t,s,a){t.exports=a.p+"assets/img/54.36c6d873.png"},512:function(t,s,a){t.exports=a.p+"assets/img/55.45c60ea7.png"},513:function(t,s,a){t.exports=a.p+"assets/img/56.2cbd81d3.png"},514:function(t,s,a){t.exports=a.p+"assets/img/57.e03d1497.png"},515:function(t,s,a){t.exports=a.p+"assets/img/58.1ed5c15e.png"},516:function(t,s,a){t.exports=a.p+"assets/img/59.f1f4c6bc.png"},517:function(t,s,a){t.exports=a.p+"assets/img/60.25697049.png"},518:function(t,s,a){t.exports=a.p+"assets/img/61.9bc8dd56.png"},519:function(t,s,a){t.exports=a.p+"assets/img/62.a20be952.png"},520:function(t,s,a){t.exports=a.p+"assets/img/63.78ed3f21.png"},521:function(t,s,a){t.exports=a.p+"assets/img/64.916772db.png"},522:function(t,s,a){t.exports=a.p+"assets/img/65.5704d3ef.png"},523:function(t,s,a){t.exports=a.p+"assets/img/66.cfc66d59.png"},524:function(t,s,a){t.exports=a.p+"assets/img/67.298ef8c4.png"},525:function(t,s,a){t.exports=a.p+"assets/img/68.febb04ad.png"},526:function(t,s,a){t.exports=a.p+"assets/img/69.2b39d219.png"},527:function(t,s,a){t.exports=a.p+"assets/img/70.024f151c.png"},528:function(t,s,a){t.exports=a.p+"assets/img/71.b216d1e3.png"},529:function(t,s,a){t.exports=a.p+"assets/img/73.80b209b0.png"},530:function(t,s,a){t.exports=a.p+"assets/img/74.e1cfb46b.png"},531:function(t,s,a){t.exports=a.p+"assets/img/75.ad440519.png"},952:function(t,s,a){"use strict";a.r(s);var e=a(65),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"基础部分"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基础部分"}},[t._v("#")]),t._v(" 基础部分")]),t._v(" "),e("h2",{attrs:{id:"_1-下载地址"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-下载地址"}},[t._v("#")]),t._v(" 1. 下载地址")]),t._v(" "),e("p",[t._v("官网：https://www.docker.com")]),t._v(" "),e("p",[t._v("Docker Hub 官网：https://hub.docker.com")]),t._v(" "),e("h2",{attrs:{id:"_2-docker安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-docker安装"}},[t._v("#")]),t._v(" 2. Docker安装")]),t._v(" "),e("h3",{attrs:{id:"_2-1-前提说明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-前提说明"}},[t._v("#")]),t._v(" 2.1 前提说明")]),t._v(" "),e("h4",{attrs:{id:"_2-1-1-centos上安装docker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-centos上安装docker"}},[t._v("#")]),t._v(" 2.1.1 CentOS上安装Docker")]),t._v(" "),e("br"),t._v(" "),e("img",{staticStyle:{zoom:"60%"},attrs:{src:a(475)}}),t._v(" "),e("br"),t._v(" "),e("h4",{attrs:{id:"_2-1-2-前提条件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-前提条件"}},[t._v("#")]),t._v(" 2.1.2 前提条件")]),t._v(" "),e("p",[t._v("目前，CentOS仅发行版本中的内核支持Docker。Docker运行在CentOS 7(64-bit)上，要求系统为64位，Linux系统内核版本为3.8以上，这里选用Centos7.x。")]),t._v(" "),e("h4",{attrs:{id:"_2-1-3-查看系统内核"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-3-查看系统内核"}},[t._v("#")]),t._v(" 2.1.3 查看系统内核")]),t._v(" "),e("p",[t._v("uname 命令用于打印当前系统相关信息（内核版本号，硬件架构，主机名称和操作系统类型等）。")]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:a(476)}}),t._v(" "),e("br"),t._v(" "),e("h3",{attrs:{id:"_2-2-docker基本组成"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-docker基本组成"}},[t._v("#")]),t._v(" 2.2 Docker基本组成")]),t._v(" "),e("h4",{attrs:{id:"_2-2-1-镜像-image"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-镜像-image"}},[t._v("#")]),t._v(" 2.2.1 镜像(image)")]),t._v(" "),e("ul",[e("li",[t._v("Docker 镜像（image）就是一个 "),e("strong",[t._v("只读")]),t._v(" 的模板。镜像可以用来创建 Docker 容器， 一个镜像可以创建很多容器")]),t._v(" "),e("li",[t._v("它也相当于是一个root文件系统。比如官方镜像 centos:7 就包含了完整的一套 centos:7 最小系统的 root 文件系统")]),t._v(" "),e("li",[t._v("相当于容器的“源代码”， docker镜像文件类似于Java的类模板，而docker容器实例类似于java中new出来的实例对象")])]),t._v(" "),e("br"),t._v(" "),e("br"),t._v(" "),e("h4",{attrs:{id:"_2-2-2-容器-container"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-容器-container"}},[t._v("#")]),t._v(" 2.2.2 容器(container)")]),t._v(" "),e("p",[t._v("从面向对象角度")]),t._v(" "),e("ul",[e("li",[t._v("Docker 利用容器（Container）独立运行的一个或一组应用，应用程序或服务运行在容器里面，容器就类似于一个虚拟化的运行环境， 容器是用镜像创建的运行实例 。就像是Java中的类和实例对象一样，镜像是静态的定义，容器是镜像运行时的实体。容器为镜像提供了一个标准的和隔离的运行环境，它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台")])]),t._v(" "),e("br"),t._v(" "),e("p",[t._v("从镜像容器角度")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("可以把容器看做是一个简易版的")]),t._v(" *"),e("strong",[t._v("Linux*")]),t._v(" "),e("strong",[t._v("环境")]),t._v(" （包括root用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序")])]),t._v(" "),e("h4",{attrs:{id:"_2-2-3-仓库-repository"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-仓库-repository"}},[t._v("#")]),t._v(" 2.2.3 仓库(repository)")]),t._v(" "),e("p",[t._v("仓库（Repository）是 集中存放镜像文件的场所。")]),t._v(" "),e("p",[t._v("类似于")]),t._v(" "),e("ul",[e("li",[t._v("Maven仓库，存放各种jar包的地方")]),t._v(" "),e("li",[t._v("github仓库，存放各种git项目的地方")])]),t._v(" "),e("p",[t._v("Docker公司提供的官方registry被称为Docker Hub，存放各种镜像模板的地方。")]),t._v(" "),e("p",[t._v("仓库分为公开仓库（Public）和私有仓库（Private）两种形式。")]),t._v(" "),e("p",[t._v("最大的公开仓库是 Docker Hub（https://hub.docker.com/）， 存放了数量庞大的镜像供用户下载。")]),t._v(" "),e("p",[t._v("国内的公开仓库包括阿里云 、网易云等 。")]),t._v(" "),e("h4",{attrs:{id:"_2-2-4-小结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-4-小结"}},[t._v("#")]),t._v(" 2.2.4 小结")]),t._v(" "),e("p",[t._v("需要正确的理解仓库/镜像/容器这几个概念:")]),t._v(" "),e("ul",[e("li",[t._v("Docker 本身是一个容器运行载体或称之为管理引擎。我们把应用程序和配置依赖打包好形成一个可交付的运行环境，这个打包好的运行环境就是image镜像文件。只有通过这个镜像文件才能生成Docker容器实例(类似Java中new出来一个对象)。")]),t._v(" "),e("li",[t._v("image文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。")])]),t._v(" "),e("br"),t._v(" "),e("p",[t._v("镜像文件")]),t._v(" "),e("ul",[e("li",[t._v("image 文件生成的容器实例，本身也是一个文件，称为镜像文件。")])]),t._v(" "),e("br"),t._v(" "),e("p",[t._v("容器实例")]),t._v(" "),e("ul",[e("li",[t._v("一个容器运行一种服务，当我们需要的时候，就可以通过docker客户端创建一个对应的运行实例，也就是我们的容器 。")])]),t._v(" "),e("br"),t._v(" "),e("p",[t._v("仓库")]),t._v(" "),e("ul",[e("li",[t._v("就是放一堆镜像的地方，我们可以把镜像发布到仓库中，需要的时候再从仓库中拉下来就可以了。")])]),t._v(" "),e("h3",{attrs:{id:"_2-3-docker架构图解-入门版"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-docker架构图解-入门版"}},[t._v("#")]),t._v(" 2.3 Docker架构图解(入门版)")]),t._v(" "),e("img",{staticStyle:{zoom:"70%"},attrs:{src:a(477)}}),t._v(" "),e("br"),t._v(" "),e("h4",{attrs:{id:"_2-3-1-工作原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-1-工作原理"}},[t._v("#")]),t._v(" 2.3.1 工作原理")]),t._v(" "),e("p",[t._v("Docker是一个 Client-Server 结构的系统，Docker守护进程运行在主机上， 然后通过Socket连接从客户端访问，守护进程从客户端接受命令并管理运行在主机上的容器 。 容器，是一个运行时环境，就是我们前面说到的集装箱。")]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:a(478)}}),t._v(" "),e("br"),t._v(" "),e("p",[t._v("Docker是一个C/S模式的架构，后端是一个松耦合架构，众多模块各司其职。")]),t._v(" "),e("h4",{attrs:{id:"_2-3-2-运行基本流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-2-运行基本流程"}},[t._v("#")]),t._v(" 2.3.2 运行基本流程")]),t._v(" "),e("ol",[e("li",[t._v("用户是使用 "),e("code",[t._v("Docker Client")]),t._v(" 与 "),e("code",[t._v("Docker Daemon")]),t._v(" 建立通信，并发送请求给后者")]),t._v(" "),e("li",[e("code",[t._v("Docker Daemon")]),t._v(" 作为Docker架构中的主体部分，首先提供 "),e("code",[t._v("Docker Server")]),t._v(" 的功能时期可以接受 Docker Client 的请求")]),t._v(" "),e("li",[e("code",[t._v("Docker Engine")]),t._v(" 执行Docker内部的一系列工作，每一项工作都是以一个 "),e("code",[t._v("Job")]),t._v(" 的形式的存在")]),t._v(" "),e("li",[t._v("Job 的运行过程中，当需要容器镜像时，则从Docker Register中下载镜像，并通过镜像管理驱动 "),e("code",[t._v("Graph driver")]),t._v(" 将下载镜像以Graph的形式存储")]),t._v(" "),e("li",[t._v("当需要为Docker创建网络环境时，通过网络驱动 "),e("code",[t._v("Network driver")]),t._v(" 创建并配置Docker容器网络环境")]),t._v(" "),e("li",[t._v("当需要限制Docker容器运行资源或执行用户指令等操作时，则通过 "),e("code",[t._v("Exec driver")]),t._v(" 来完成")]),t._v(" "),e("li",[t._v("Libcontainer是一项独立的容器管理包，Network driver以及Exec driver都是通过Libcontainer来实现具体容器进行的操作")])]),t._v(" "),e("img",{attrs:{width:"600px",src:a(479)}}),t._v(" "),e("br"),t._v(" "),e("img",{staticStyle:{"margin-left":"3px"},attrs:{width:"600px",src:a(480)}}),t._v(" "),e("br"),t._v(" "),e("h3",{attrs:{id:"_2-4-安装步骤"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-安装步骤"}},[t._v("#")]),t._v(" 2.4 安装步骤")]),t._v(" "),e("blockquote",[e("p",[e("strong",[t._v("CentOS7安装Docker")])])]),t._v(" "),e("ol",[e("li",[t._v("确定系统是CentOS7以上版本")])]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看CentOS版本命令")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" /etc/redhat-release\n")])])]),e("br"),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("卸载旧版本")])]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:a(481)}}),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 卸载旧版本docker命令")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" yum remove "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n                  docker-client "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n                  docker-client-latest "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n                  docker-common "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n                  docker-latest "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n                  docker-latest-logrotate "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n                  docker-logrotate "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n                  docker-engine\n")])])]),e("br"),t._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[t._v("yum安装gcc相关命令")])]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# yum安装gcc相关命令")]),t._v("\nyum -y "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" gcc\nyum -y "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" gcc-c++\n")])])]),e("br"),t._v(" "),e("ol",{attrs:{start:"4"}},[e("li",[t._v("安装需要的软件包")])]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:a(482)}}),t._v(" "),e("p",[t._v("在新主机上首次安装Docker Engine之前，需要先设置Docker的yum源（软件仓库）。之后，您可以从软件仓库安装和更新Docker")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 安装yum-utils包（提供yum-config-manager命令），并设置docker的yum源")]),t._v("\nyum "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" -y yum-utils\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 推荐使用阿里的 docker 镜像仓库，国外的镜像仓库是比较慢的")]),t._v("\nyum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 更新yum软件包索引")]),t._v("\nyum makecache fast\n")])])]),e("br"),t._v(" "),e("ol",{attrs:{start:"5"}},[e("li",[t._v("安装DOCKER CE 引擎")])]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 命令")]),t._v("\nyum -y "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" docker-ce docker-ce-cli containerd.io\n")])])]),e("br"),t._v(" "),e("ol",{attrs:{start:"6"}},[e("li",[t._v("启动docker")])]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 启动命令")]),t._v("\nsystemctl start "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v("\n")])])]),e("br"),t._v(" "),e("ol",{attrs:{start:"7"}},[e("li",[t._v("测试")])]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 测试")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" version \n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run hello-world\n")])])]),e("img",{staticStyle:{zoom:"50%"},attrs:{src:a(483)}}),t._v(" "),e("br"),t._v(" "),e("br"),t._v(" "),e("ol",{attrs:{start:"8"}},[e("li",[t._v("卸载")])]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 卸载命令")]),t._v("\nsystemctl stop "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" \nyum remove docker-ce docker-ce-cli containerd.io\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" -rf /var/lib/docker\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" -rf /var/lib/containerd\n")])])]),e("h3",{attrs:{id:"_2-5-阿里云镜像加速"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-阿里云镜像加速"}},[t._v("#")]),t._v(" 2.5 阿里云镜像加速")]),t._v(" "),e("h4",{attrs:{id:"_2-5-1-是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-1-是什么"}},[t._v("#")]),t._v(" 2.5.1 是什么")]),t._v(" "),e("ul",[e("li",[t._v("地址：https://promotion.aliyun.com/ntms/act/kubernetes.html")]),t._v(" "),e("li",[t._v("注册一个属于自己的阿里云账户")]),t._v(" "),e("li",[t._v("获得加速器地址连接：\n"),e("ol",[e("li",[t._v("登陆阿里云开发者平台")]),t._v(" "),e("li",[t._v("点击控制台")]),t._v(" "),e("li",[t._v("选择容器镜像服务")]),t._v(" "),e("li",[t._v("获取加速器地址")])])]),t._v(" "),e("li",[t._v("粘贴脚本直接执行")])]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" -p /etc/docker\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("tee")]),t._v(" /etc/docker/daemon.json "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<-")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'EOF\'\n{ \n  "registry-mirrors": ["https://aa25jngu.mirror.aliyuncs.com"]\n} \nEOF')]),t._v(" \n")])])]),e("ul",[e("li",[t._v("重启服务器")])]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重启服务器")]),t._v("\nsystemctl daemon-reload\nsystemctl restart "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v("\n")])])]),e("h4",{attrs:{id:"_2-5-2-helloworld"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-2-helloworld"}},[t._v("#")]),t._v(" 2.5.2 HelloWorld")]),t._v(" "),e("p",[t._v("启动Docker后台容器（测试运行 hello-world）")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 命令")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run hello-world\n")])])]),e("img",{staticStyle:{zoom:"50%"},attrs:{src:a(484)}}),t._v(" "),e("br"),t._v(" "),e("h4",{attrs:{id:"_2-5-3-底层原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-3-底层原理"}},[t._v("#")]),t._v(" 2.5.3 底层原理")]),t._v(" "),e("p",[t._v("为什么Docker会比VM虚拟机快：")]),t._v(" "),e("blockquote",[e("p",[e("strong",[t._v("Docker有着比虚拟机更少的抽象层")])]),t._v(" "),e("ul",[e("li",[t._v("由于docker不需要Hypervisor(虚拟机)实现硬件资源虚拟化，运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker将会在效率上有明显优势。")])]),t._v(" "),e("br"),t._v(" "),e("p",[e("strong",[t._v("Docker利用的是宿主机的内核，而不需要加载操作系统OS内核")])]),t._v(" "),e("ul",[e("li",[t._v("当新建一个容器时，docker不需要和虚拟机一样重新加载一个操作系统内核。进而避免引寻、加载操作系统内核返回等比较费时费资源的过程，当新建一个虚拟机时，虚拟机软件需要加载OS，返回新建过程是分钟级别的。而docker由于直接利用宿主机的操作系统，则省略了返回过程，新建一个docker容器只需要几秒钟。")])])]),t._v(" "),e("img",{staticStyle:{zoom:"60%"},attrs:{src:a(485)}}),t._v(" "),e("br"),t._v(" "),e("h2",{attrs:{id:"_3-docker常用命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-docker常用命令"}},[t._v("#")]),t._v(" 3. Docker常用命令")]),t._v(" "),e("h3",{attrs:{id:"_3-1-启动帮助命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-启动帮助命令"}},[t._v("#")]),t._v(" 3.1 启动帮助命令")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 启动命令")]),t._v("\nsystemctl start "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 停止命令")]),t._v("\nsystemctl stop "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重启命令")]),t._v("\nsystemctl restart "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看docker状态")]),t._v("\nsystemctl status "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 开机启动")]),t._v("\nsystemctl "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("enable")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看 docker 概要信息")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" info\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看docker 总体帮助文档")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" --help\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看docker命令帮助文档：")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" 具体命令 --help\n")])])]),e("h3",{attrs:{id:"_3-2-镜像命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-镜像命令"}},[t._v("#")]),t._v(" 3.2 镜像命令")]),t._v(" "),e("h4",{attrs:{id:"_3-2-1-docker-image"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-1-docker-image"}},[t._v("#")]),t._v(" 3.2.1 docker image")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 列出本地主机上的镜像（或者 docker image ls）")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" images \n")])])]),e("img",{staticStyle:{zoom:"60%"},attrs:{src:a(486)}}),t._v(" "),e("p",[t._v("各个选项说明：")]),t._v(" "),e("ul",[e("li",[t._v("REPOSITORY：表示镜像的仓库源")]),t._v(" "),e("li",[t._v("TAG：镜像的标签版本号")]),t._v(" "),e("li",[t._v("IMAGE ID：镜像ID")]),t._v(" "),e("li",[t._v("CREATED：镜像创建时间")]),t._v(" "),e("li",[t._v("SIZE：镜像大小")])]),t._v(" "),e("p",[t._v("同一仓库源可以有多个 TAG 版本，代表这个仓库源的不同版本，我们使用 REPOSITORY:TAG 来定义不同的镜像。")]),t._v(" "),e("p",[t._v("如果你不指定一个镜像的版本标签，例如你只使用 ubuntu，docker 将默认使用 ubuntu:latest 镜像")]),t._v(" "),e("br"),t._v(" "),e("p",[t._v("OPTIONS 说明")]),t._v(" "),e("ul",[e("li",[t._v("-a :  列出本地所有的镜像（含历史映像层）")]),t._v(" "),e("li",[t._v("-q：只显示镜像ID")])]),t._v(" "),e("h4",{attrs:{id:"_3-2-2-docker-search"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-2-docker-search"}},[t._v("#")]),t._v(" 3.2.2 docker search")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 网站")]),t._v("\nhttps://hub.docker.com\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 命令")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" search "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("OPTIONS"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" 镜像名字\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# OPTIONS说明")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# --limit ：只列出N个镜像，默认25个")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" search --limit "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" redis\n")])])]),e("p",[t._v("案例")]),t._v(" "),e("img",{staticStyle:{zoom:"60%"},attrs:{src:a(487)}}),t._v(" "),e("h4",{attrs:{id:"_3-2-3-docker-pull"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-3-docker-pull"}},[t._v("#")]),t._v(" 3.2.3 docker pull")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 下载镜像")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" pull 镜像名字"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(":TAG"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n \n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" pull  镜像名字\n \n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 没有TAG就是最新版本 等价于")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" pull 镜像名字:latest\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" pull ubuntu\n")])])]),e("img",{staticStyle:{zoom:"60%"},attrs:{src:a(488)}}),t._v(" "),e("h4",{attrs:{id:"_3-2-4-docker-system-df"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-4-docker-system-df"}},[t._v("#")]),t._v(" 3.2.4 docker system df")]),t._v(" "),e("img",{staticStyle:{zoom:"60%"},attrs:{src:a(489)}}),t._v(" "),e("h4",{attrs:{id:"_3-2-5-docker-rmi"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-5-docker-rmi"}},[t._v("#")]),t._v(" 3.2.5 docker rmi")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除单个")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" rmi -f 镜像ID\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除多个")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" rmi -f 镜像名1:TAG 镜像名2:TAG\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除全部")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" rmi -f "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" images -qa"),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v("\n")])])]),e("h4",{attrs:{id:"_3-2-6-什么是虚悬镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-6-什么是虚悬镜像"}},[t._v("#")]),t._v(" 3.2.6 什么是虚悬镜像")]),t._v(" "),e("p",[t._v("仓库名称，标签都是 "),e("code",[t._v("<none>")]),t._v(" 的镜像，俗称虚悬镜像 dangling image")]),t._v(" "),e("p",[t._v("长什么样子")]),t._v(" "),e("p",[t._v("后续 Dockerfile 章节在介绍")]),t._v(" "),e("h3",{attrs:{id:"_3-3-容器命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-容器命令"}},[t._v("#")]),t._v(" 3.3 容器命令")]),t._v(" "),e("p",[t._v("有镜像才能创建容器，这是根本前提（下载一个CentOS或者ubuntu镜像演示）")]),t._v(" "),e("p",[e("strong",[t._v("1. 说明")])]),t._v(" "),e("img",{staticStyle:{zoom:"60%"},attrs:{src:a(490)}}),t._v(" "),e("br"),t._v(" "),e("p",[e("strong",[t._v("2. docker pull centos")])]),t._v(" "),e("p",[e("strong",[t._v("3. docker pull ubuntu")])]),t._v(" "),e("p",[e("strong",[t._v("4. 本次演示用ubuntu演示")])]),t._v(" "),e("img",{staticStyle:{zoom:"60%"},attrs:{src:a(491)}}),t._v(" "),e("h4",{attrs:{id:"_3-3-1-新建-启动容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-1-新建-启动容器"}},[t._v("#")]),t._v(" 3.3.1 新建+启动容器")]),t._v(" "),e("p",[t._v("新建+启动容器 命令")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("OPTIONS"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" IMAGE COMMAND\n")])])]),e("p",[e("strong",[t._v("OPTIONS说明（常用）：有些是一个减号，有些是两个减号")])]),t._v(" "),e("ul",[e("li",[e("p",[t._v('--name="容器新名字"       为容器指定一个名称')])]),t._v(" "),e("li",[e("p",[t._v("-d：后台运行容器并返回容器ID，也即启动守护式容器(后台运行)")])]),t._v(" "),e("li",[e("p",[t._v("-i：以交互模式运行容器，通常与 -t 同时使用")])]),t._v(" "),e("li",[e("p",[t._v("-t：为容器重新分配一个伪输入终端，通常与 -i 同时使用；也即 启动交互式容器(前台有伪终端，等待交互)")])]),t._v(" "),e("li",[e("p",[t._v("-P:  随机 端口映射，大写P")])]),t._v(" "),e("li",[e("p",[t._v("-p:  指定 端口映射，小写p")])])]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:a(492)}}),t._v(" "),e("br"),t._v(" "),e("p",[t._v("启动交互式容器（前台命令行）")]),t._v(" "),e("img",{staticStyle:{zoom:"60%"},attrs:{src:a(493)}}),t._v(" "),e("br"),t._v(" "),e("p",[t._v("使用镜像 centos:latest 以交互模式启动一个容器，在容器内执行 /bin/bash 命令。")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -it centos /bin/bash \n")])])]),e("p",[t._v("参数说明：")]),t._v(" "),e("ul",[e("li",[t._v("-i：交互式操作。")]),t._v(" "),e("li",[t._v("-t：终端。")]),t._v(" "),e("li",[t._v("centos：centos 镜像。")]),t._v(" "),e("li",[t._v("/bin/bash：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 /bin/bash。 要退出终端，直接输入 exit")])]),t._v(" "),e("h4",{attrs:{id:"_3-3-2-列出正在运行的容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-2-列出正在运行的容器"}},[t._v("#")]),t._v(" 3.3.2 列出正在运行的容器")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 列出当前所有正在运行的容器")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("OPTIONS"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# OPTIONS说明")]),t._v("\n-a "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" 列出当前所有 正在运行 的容器 + 历史上运行过 的 \n-l :显示最近创建的容器。 \n-n：显示最近n个创建的容器。 \n-q :静默模式，只显示容器编号。 \n")])])]),e("h4",{attrs:{id:"_3-3-3-退出容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-3-退出容器"}},[t._v("#")]),t._v(" 3.3.3 退出容器")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 两种退出方式")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1、run进去容器，exit退出，容器停止")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exit")]),t._v(" \n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2、run进去容器，ctrl+p+q退出，容器不停止")]),t._v("\nctrl+p+q\n")])])]),e("h4",{attrs:{id:"_3-3-4-启动已停止运行的容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-4-启动已停止运行的容器"}},[t._v("#")]),t._v(" 3.3.4 启动已停止运行的容器")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 启动已停止运行的容器")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" start 容器ID或者容器名\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重启容器")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" restart 容器ID或者容器名\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 停止容器")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" stop 容器ID或者容器名\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 强制停止容器")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("kill")]),t._v(" 容器ID或容器名\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除已停止的容器")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" 容器ID\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 一次性删除多个容器实例")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" -rf "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v(" -a -q"),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v(" -a -q "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("xargs")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v("\n")])])]),e("h4",{attrs:{id:"_3-3-5-重要"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-5-重要"}},[t._v("#")]),t._v(" 3.3.5 重要")]),t._v(" "),e("p",[e("strong",[t._v("启动守护式容器（后台服务器）")])]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#有镜像才能创建容器，这是根本前提（下载一个Redis6.0.8镜像演示）")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#在大部分的场景下，我们希望docker的服务是在后台运行的，我们可以通过 -d 指定容器的后台运行模式。")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -d 容器名\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用镜像centos:latest以后台模式启动一个容器 ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -d centos\n")])])]),e("p",[t._v("问题：通过 "),e("code",[t._v("docker ps -a")]),t._v(" 进行查看，会发现容器已经退出")]),t._v(" "),e("p",[t._v("很重要的要说明的一点： Docker容器后台运行，就必须有一个前台进程。")]),t._v(" "),e("p",[t._v("容器运行的命令如果不是那些 一直挂起的命令 （比如运行top，tail），就是会自动退出的。")]),t._v(" "),e("br"),t._v(" "),e("p",[t._v("这个是docker的机制问题，比如你的web容器，我们以nginx为例，正常情况下, 我们配置启动服务只需要启动响应的service即可。例如service nginx start。")]),t._v(" "),e("p",[t._v("但是，这样做，nginx为后台进程模式运行，就导致docker前台没有运行的应用, 这样的容器后台启动后，会立即自杀因为他觉得他没事可做了。")]),t._v(" "),e("p",[t._v("所以，最佳的解决方案是, 将你要运行的程序以前台进程的形式运行，常见就是命令行模式，表示我还有交互操作，别中断。")]),t._v(" "),e("br"),t._v(" "),e("p",[e("strong",[t._v("redis前后台启动演示case")])]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 前台交互式启动")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -it redis:6.0.8\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 后台交互式启动")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -d redis:6.0.8\n")])])]),e("br"),t._v(" "),e("p",[e("strong",[t._v("查看容器日志")])]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看容器内运行的进程")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("top")]),t._v(" 容器ID\n")])])]),e("br"),t._v(" "),e("p",[e("strong",[t._v("查看容器内部细节")])]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看容器内部细节")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" inspect 容器ID\n")])])]),e("br"),t._v(" "),e("p",[e("strong",[t._v("进入正在运行的容器并以命令行交互")])]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exec")]),t._v(" -it 容器ID bashShell\n")])])]),e("img",{staticStyle:{zoom:"60%"},attrs:{src:a(494)}}),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" attach 容器ID\n")])])]),e("ol",[e("li",[t._v("attach 直接进入容器启动命令的终端，不会启动新的进程，用exit退出，会导致容器的停止。")])]),t._v(" "),e("img",{staticStyle:{zoom:"60%"},attrs:{src:a(495)}}),t._v(" "),e("br"),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("exec 是在容器中打开新的终端，并且可以启动新的进程，用exit退出，不会导致容器的停止。")])]),t._v(" "),e("img",{staticStyle:{zoom:"60%"},attrs:{src:a(496)}}),t._v(" "),e("br"),t._v(" "),e("blockquote",[e("p",[t._v("推荐大家使用docker exec 命令，因为退出容器终端，不会导致容器的停止。")])]),t._v(" "),e("p",[t._v("使用之前的redis容器实例进入试试")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exec")]),t._v(" -it 容器ID /bin/bash\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exec")]),t._v(" -it 容器ID redis-cli\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#一般用-d后台启动的程序，在用exec进入对应容器实例")]),t._v("\n")])])]),e("br"),t._v(" "),e("p",[e("strong",[t._v("从容器内拷贝文件到主机上")])]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cp")]),t._v(" 容器ID:容器内路径  目的主机路径\n")])])]),e("img",{staticStyle:{zoom:"60%"},attrs:{src:a(497)}}),t._v(" "),e("br"),t._v(" "),e("p",[e("strong",[t._v("导入和导出容器")])]),t._v(" "),e("ul",[e("li",[e("code",[t._v("export")]),t._v(" 导出容器的内容留作为一个tar归档文件 [对应import命令]")]),t._v(" "),e("li",[e("code",[t._v("import")]),t._v(" 根据 tar 包中的内容创建一个新的文件系统并导入为镜像 [对应export]")])]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v(" 容器ID  "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 文件.tar \n")])])]),e("img",{staticStyle:{zoom:"60%"},attrs:{src:a(498)}}),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("cat 文件名.tar  | docker  import  - 镜像用户/镜像名:镜像版本号\n")])])]),e("img",{staticStyle:{zoom:"60%"},attrs:{src:a(499)}}),t._v(" "),e("h3",{attrs:{id:"_3-4-小结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-小结"}},[t._v("#")]),t._v(" 3.4 小结")]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:a(500)}}),t._v(" "),e("br"),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[t._v("attach    Attach to a running container                 "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 当前 shell 下 attach 连接指定运行镜像 ")]),t._v("\nbuild     Build an image from a Dockerfile              "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 通过 Dockerfile 定制镜像 ")]),t._v("\ncommit    Create a new image from a container changes   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 提交当前容器为新的镜像 ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cp")]),t._v("        Copy files/folders from the containers filesystem to the "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("host")]),t._v(" path   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#从容器中拷贝指定文件或者目录到宿主机中 ")]),t._v("\ncreate    Create a new container                        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建一个新的容器，同 run，但不启动容器 ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v("      Inspect changes on a container's filesystem   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看 docker 容器变化 ")]),t._v("\nevents    Get real "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("time")]),t._v(" events from the server          "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 从 docker 服务获取容器实时事件 ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exec")]),t._v("      Run a "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("command")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" an existing container        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在已存在的容器上运行命令 ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v("    Stream the contents of a container as a "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("tar")]),t._v(" archive   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 导出容器的内容流作为一个 tar 归档文件[对应 import ] ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("history")]),t._v("   Show the "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("history")]),t._v(" of an image                  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 展示一个镜像形成历史 ")]),t._v("\nimages    List images                                   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 列出系统当前镜像 ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("import")]),t._v("    Create a new filesystem image from the contents of a tarball "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 从tar包中的内容创建一个新的文件系统映像[对应export] ")]),t._v("\ninfo      Display system-wide information               "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示系统相关信息 ")]),t._v("\ninspect   Return low-level information on a container   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看容器详细信息 ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("kill")]),t._v("      Kill a running container                      "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# kill 指定 docker 容器 ")]),t._v("\nload      Load an image from a "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("tar")]),t._v(" archive              "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 从一个 tar 包中加载一个镜像[对应 save] ")]),t._v("\nlogin     Register or Login to the "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" registry server    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 注册或者登陆一个 docker 源服务器 ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("logout")]),t._v("    Log out from a Docker registry server          "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 从当前 Docker registry 退出 ")]),t._v("\nlogs      Fetch the logs of a container                 "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出当前容器日志信息 ")]),t._v("\nport      Lookup the public-facing port "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("which")]),t._v(" is NAT-ed to PRIVATE_PORT    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看映射端口对应的容器内部源端口 ")]),t._v("\npause     Pause all processes within a container        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 暂停容器 ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v("        List containers                               "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 列出容器列表 ")]),t._v("\npull      Pull an image or a repository from the "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" registry server   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 从docker镜像源服务器拉取指定镜像或者库镜像 ")]),t._v("\npush      Push an image or a repository to the "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" registry server    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 推送指定镜像或者库镜像至docker源服务器 ")]),t._v("\nrestart   Restart a running container                   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重启运行的容器 ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v("        Remove one or "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("more")]),t._v(" containers                 "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 移除一个或者多个容器 ")]),t._v("\nrmi       Remove one or "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("more")]),t._v(" images       "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除] ")]),t._v("\nrun       Run a "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("command")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" a new container              "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建一个新的容器并运行一个命令 ")]),t._v("\nsave      Save an image to a "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("tar")]),t._v(" archive                "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 保存一个镜像为一个 tar 包[对应 load] ")]),t._v("\nsearch    Search "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" an image on the Docker Hub         "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在 docker hub 中搜索镜像 ")]),t._v("\nstart     Start a stopped containers                    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 启动容器 ")]),t._v("\nstop      Stop a running containers                     "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 停止容器 ")]),t._v("\ntag       Tag an image into a repository                "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 给源中镜像打标签 ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("top")]),t._v("       Lookup the running processes of a container   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看容器中运行的进程信息 ")]),t._v("\nunpause   Unpause a paused container                    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 取消暂停容器 ")]),t._v("\nversion   Show the "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" version information           "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看 docker 版本号 ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("wait")]),t._v("      Block "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("until")]),t._v(" a container stops, "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v(" print its "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exit")]),t._v(" code   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 截取容器停止时的退出状态值")]),t._v("\n")])])]),e("h2",{attrs:{id:"_4-docker镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-docker镜像"}},[t._v("#")]),t._v(" 4. Docker镜像")]),t._v(" "),e("h3",{attrs:{id:"_4-1-简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-简介"}},[t._v("#")]),t._v(" 4.1 简介")]),t._v(" "),e("p",[e("strong",[t._v("镜像")])]),t._v(" "),e("ul",[e("li",[t._v("是一种轻量级、可执行的独立软件包，它包含运行某个软件所需的所有内容，我们把应用程序和配置依赖打包好形成一个可交付的运行环境（包括代码、运行时需要的库、环境变量和配置文件等)，这个打包好的运行环境就是image镜像文件。")]),t._v(" "),e("li",[t._v("只有通过这个镜像文件才能生成Docker容器实例(类似Java中new出来一个对象)。")])]),t._v(" "),e("br"),t._v(" "),e("p",[e("strong",[t._v("分层镜像")])]),t._v(" "),e("ul",[e("li",[t._v("以我们的pull为例，在下载的过程中我们可以看到docker的镜像好像是在一层一层的在下载 。")])]),t._v(" "),e("br"),t._v(" "),e("p",[e("strong",[t._v("UnionFS（联合文件系统）")])]),t._v(" "),e("ul",[e("li",[t._v("UnionFS（联合文件系统）：Union文件系统（UnionFS）是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加， 同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtual filesystem)。Union 文件系统是 Docker 镜像的基础。 镜像可以通过分层来进行继承 ，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。")]),t._v(" "),e("li",[t._v("特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录")])]),t._v(" "),e("br"),t._v(" "),e("br"),t._v(" "),e("br"),t._v(" "),e("p",[e("strong",[t._v("镜像加载原理")])]),t._v(" "),e("p",[t._v("Docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统叫做UnionFS。")]),t._v(" "),e("p",[t._v("bootfs(boot file system)主要包含bootloader和kernel，bootloader主要是引导加载kernel，Linux刚启动时会加载bootfs文件系统， 在Docker镜像的最底层是引导文件系统bootfs。 这一层与我们典型的Linux/Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。")]),t._v(" "),e("p",[t._v("rootfs (root file system) ，在bootfs之上 。包含的就是典型 Linux 系统中的 /dev, /proc, /bin, /etc 等标准目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu，Centos等等。")]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:a(501)}}),t._v(" "),e("br"),t._v(" "),e("br"),t._v(" "),e("p",[t._v("平时我们安装进虚拟机的CentOS都是好几个G，为什么docker这里才200M？")]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:a(502)}}),t._v(" "),e("ul",[e("li",[t._v("对于一个精简的OS，rootfs可以很小，只需要包括最基本的命令、工具和程序库就可以了，因为底层直接用Host的kernel，自己只需要提供 rootfs 就行了。由此可见对于不同的linux发行版，bootfs基本是一致的，rootfs会有差别，因此不同的发行版可以公用bootfs。")])]),t._v(" "),e("br"),t._v(" "),e("br"),t._v(" "),e("p",[t._v("为什么Docker镜像要采用这种分层结构呢？")]),t._v(" "),e("ul",[e("li",[t._v("镜像分层最大的一个好处就是共享资源，方便复制迁移，就是为了复用。 比如说有多个镜像都从相同的 base 镜像构建而来，那么 Docker Host 只需在磁盘上保存一份 base 镜像； 同时内存中也只需加载一份 base 镜像，就可以为所有容器服务了。而且镜像的每一层都可以被共享。")])]),t._v(" "),e("h3",{attrs:{id:"_4-2-重点理解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-重点理解"}},[t._v("#")]),t._v(" 4.2 重点理解")]),t._v(" "),e("p",[t._v("Docker镜像层都是只读的，容器层是可写的，当容器启动时，一个新的可写层被加载到镜像的顶部。这一层通常被称作“容器层“，“容器层“之下的都叫“镜像层”。")]),t._v(" "),e("p",[t._v("所有对容器的改动 - 无论添加、删除、还是修改文件都只会发生在容器层中。只有容器层是可写的，容器层下面的所有镜像层都是只读的。")]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:a(503)}}),t._v(" "),e("h3",{attrs:{id:"_4-3-commit操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-commit操作"}},[t._v("#")]),t._v(" 4.3 commit操作")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" commit 提交容器副本使之成为一个新的镜像\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" commit -m"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"提交的描述信息"')]),t._v(" -a"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"作者"')]),t._v(" 容器ID  要创建的目标镜像名:"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("标签名"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),e("p",[t._v("【案例演示】ubuntu安装vim")]),t._v(" "),e("ol",[e("li",[t._v("从Hub上下ubuntu镜像到本地并成功运行")]),t._v(" "),e("li",[t._v("原始默认Ubuntu镜像是不带着vim命令的")]),t._v(" "),e("li",[t._v("外网连通情况下，安装vim")])]),t._v(" "),e("p",[t._v("docker容器内执行上述两条命令：")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 先更新我们的包管理工具")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("apt-get")]),t._v(" update\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 然后安装我们需要的vim")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("apt-get")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("vim")]),t._v("\n")])])]),e("img",{staticStyle:{zoom:"40%"},attrs:{src:a(504)}}),t._v(" "),e("br"),t._v(" "),e("ol",{attrs:{start:"4"}},[e("li",[t._v("安装完成后，commit我们自己的新镜像")])]),t._v(" "),e("img",{staticStyle:{zoom:"40%"},attrs:{src:a(505)}}),t._v(" "),e("ol",{attrs:{start:"5"}},[e("li",[t._v("启动我们的新镜像并和原来的对比")])]),t._v(" "),e("img",{staticStyle:{zoom:"40%"},attrs:{src:a(506)}}),t._v(" "),e("p",[t._v("官网是默认下载的Ubuntu没有vim命令")]),t._v(" "),e("p",[t._v("我们自己commit构建的镜像，新增加了vim功能，可以成功使用。")]),t._v(" "),e("h3",{attrs:{id:"_4-4-总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-总结"}},[t._v("#")]),t._v(" 4.4 总结")]),t._v(" "),e("p",[t._v("Docker中的镜像分层， 支持通过扩展现有镜像，创建新的镜像 。类似Java继承于一个Base基础类，自己再按需扩展。\n新镜像是从 base 镜像一层一层叠加生成的。每安装一个软件，就在现有镜像的基础上增加一层。")]),t._v(" "),e("img",{staticStyle:{zoom:"60%"},attrs:{src:a(507)}}),t._v(" "),e("br"),t._v(" "),e("br"),t._v(" "),e("h2",{attrs:{id:"_5-镜像发布到阿里云"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-镜像发布到阿里云"}},[t._v("#")]),t._v(" 5. 镜像发布到阿里云")]),t._v(" "),e("h3",{attrs:{id:"_5-1-镜像发布到阿里云流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-镜像发布到阿里云流程"}},[t._v("#")]),t._v(" 5.1 镜像发布到阿里云流程")]),t._v(" "),e("img",{staticStyle:{zoom:"70%"},attrs:{src:a(508)}}),t._v(" "),e("h3",{attrs:{id:"_5-2-镜像生成的方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-镜像生成的方法"}},[t._v("#")]),t._v(" 5.2 镜像生成的方法")]),t._v(" "),e("p",[t._v("基于当前容器创建一个新的镜像")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" commit "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("OPTIONS"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" 容器ID "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("REPOSOTORY"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(":TAG"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),e("p",[t._v("OPTIONS说明：")]),t._v(" "),e("ul",[e("li",[t._v("-a：提交的镜像作者")]),t._v(" "),e("li",[t._v("-m：提交时的说明文字")])]),t._v(" "),e("img",{staticStyle:{zoom:"70%"},attrs:{src:a(509)}}),t._v(" "),e("br"),t._v(" "),e("br"),t._v(" "),e("p",[e("strong",[t._v("阿里云开发者平台")])]),t._v(" "),e("p",[t._v("地址：https://promotion.aliyun.com/ntms/act/kubernetes.html")]),t._v(" "),e("p",[t._v("将镜像推送到阿里云registry ，管理界面脚本")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" login --username"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("zzyybuy registry.cn-hangzhou.aliyuncs.com \n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" tag cea1bb40441c registry.cn-hangzhou.aliyuncs.com/atguiguwh/myubuntu:1.1 \n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" push registry.cn-hangzhou.aliyuncs.com/atguiguwh/myubuntu:1.1\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 上面命令是作者自己本地的，你自己酌情处理，不要粘贴我的")]),t._v("\n")])])]),e("img",{staticStyle:{zoom:"70%"},attrs:{src:a(510)}}),t._v(" "),e("br"),t._v(" "),e("br"),t._v(" "),e("h2",{attrs:{id:"_6-阿里云镜像下载到本地"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-阿里云镜像下载到本地"}},[t._v("#")]),t._v(" 6. 阿里云镜像下载到本地")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" pull registry.cn-hangzhou.aliyuncs.com/atguiguwh/myubuntu:1.1\n")])])]),e("img",{staticStyle:{zoom:"70%"},attrs:{src:a(511)}}),t._v(" "),e("br"),t._v(" "),e("br"),t._v(" "),e("h2",{attrs:{id:"_7-本地镜像发布到私有库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-本地镜像发布到私有库"}},[t._v("#")]),t._v(" 7. 本地镜像发布到私有库")]),t._v(" "),e("ol",[e("li",[t._v("下载镜像 Docker Registry")])]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" pull registry  \n")])])]),e("img",{staticStyle:{zoom:"50%"},attrs:{src:a(512)}}),t._v(" "),e("br"),t._v(" "),e("br"),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("运行私有库Registry，相当于本地有个私有库Docker hub")])]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -d -p "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5000")]),t._v(":5000 -v /zzyyuse/myregistry/:/tmp/registry --privileged"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("true registry\n")])])]),e("p",[t._v("默认情况，仓库被创建在容器的 /var/lib/registry 目录下，建议自行用容器卷映射，方便于宿主机联调")]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:a(513)}}),t._v(" "),e("br"),t._v(" "),e("br"),t._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[t._v("创建一个新镜像，ubuntu安装ifconfig命令")])]),t._v(" "),e("p",[t._v("从Hub上下载ubuntu镜像到本地并成功运行（原始Ubuntu镜像是不带着ifconfig命令的）")]),t._v(" "),e("img",{staticStyle:{zoom:"40%"},attrs:{src:a(514)}}),t._v(" "),e("p",[t._v("外网连通情况下，安装ifconfig命令")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#docker容器内 执行上述两条命令")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("apt-get")]),t._v(" update \n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("apt-get")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" net-tools \n")])])]),e("img",{staticStyle:{zoom:"40%"},attrs:{src:a(515)}}),t._v(" "),e("br"),t._v(" "),e("img",{staticStyle:{zoom:"40%"},attrs:{src:a(516)}}),t._v(" "),e("p",[t._v("安装完成后，commit我们自己的新镜像")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#docker commit -m="提交的描述信息" -a="作者"  容器ID  要创建的目标镜像名:[标签名] ')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" commit -m"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ifconfig cmd add"')]),t._v(" -a"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"zzyy"')]),t._v(" a69d7c825c4f  zzyyubuntu:1.2 \n")])])]),e("img",{staticStyle:{zoom:"40%"},attrs:{src:a(517)}}),t._v(" "),e("p",[t._v("启动我们的新镜像并和原来的对比")]),t._v(" "),e("ul",[e("li",[t._v("官网是默认下载的Ubuntu没有ifconfig命令")]),t._v(" "),e("li",[t._v("我们自己commit构建的新镜像，新增加了ifconfig功能，可以成功使用")])]),t._v(" "),e("img",{staticStyle:{zoom:"40%"},attrs:{src:a(518)}}),t._v(" "),e("br"),t._v(" "),e("br"),t._v(" "),e("ol",{attrs:{start:"4"}},[e("li",[t._v("curl验证私服库上有什么镜像")])]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -XGET http://192.168.111.162:5000/v2/_catalog \n")])])]),e("p",[t._v("可以看到，目前私服库没有任何镜像上传过")]),t._v(" "),e("img",{staticStyle:{zoom:"40%"},attrs:{src:a(519)}}),t._v(" "),e("br"),t._v(" "),e("br"),t._v(" "),e("ol",{attrs:{start:"5"}},[e("li",[t._v("将新镜像 zzyyubuntu:1.2 修改符合私服规范的Tag")])]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#按照公式： docker   tag   镜像:Tag   Host:Port/Repository:Tag ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#自己host主机IP地址，填写你们自己的")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#使用命令 docker tag 将zzyyubuntu:1.2 这个镜像修改为192.168.111.162:5000/zzyyubuntu:1.2 ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" tag  zzyyubuntu:1.2  "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".111.162:5000/zzyyubuntu:1.2 \n")])])]),e("img",{staticStyle:{zoom:"40%"},attrs:{src:a(520)}}),t._v(" "),e("br"),t._v(" "),e("br"),t._v(" "),e("ol",{attrs:{start:"6"}},[e("li",[t._v("修改配置文件使之支持http")])]),t._v(" "),e("img",{staticStyle:{zoom:"40%"},attrs:{src:a(521)}}),t._v(" "),e("blockquote",[e("p",[t._v("registry-mirrors 配置的是国内阿里提供的镜像加速地址，不用加速的话访问官网的会很慢。")]),t._v(" "),e("p",[t._v("2个配置中间有个逗号 ','别漏了，这个配置是json格式的。")])]),t._v(" "),e("p",[t._v("vim命令新增如下红色内容：vim /etc/docker/daemon.json")]),t._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"registry-mirrors"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://aa25jngu.mirror.aliyuncs.com"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"insecure-registries"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"192.168.111.162:5000"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" \n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n")])])]),e("p",[t._v("docker默认不允许http方式推送镜像，通过配置选项来取消这个限制")]),t._v(" "),e("p",[t._v("修改完后如果不生效，建议重启docker")]),t._v(" "),e("br"),t._v(" "),e("br"),t._v(" "),e("ol",{attrs:{start:"7"}},[e("li",[t._v("push推送到私服库")])]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" push "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".111.162:5000/zzyyubuntu:1.2 \n")])])]),e("img",{staticStyle:{zoom:"40%"},attrs:{src:a(522)}}),t._v(" "),e("br"),t._v(" "),e("br"),t._v(" "),e("ol",{attrs:{start:"8"}},[e("li",[t._v("curl验证私服库上有什么镜像")])]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -XGET http://192.168.111.162:5000/v2/_catalog \n")])])]),e("img",{staticStyle:{zoom:"40%"},attrs:{src:a(523)}}),t._v(" "),e("br"),t._v(" "),e("br"),t._v(" "),e("ol",{attrs:{start:"9"}},[e("li",[t._v("pull到本地并运行")])]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" pull "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".111.162:5000/zzyyubuntu:1.2\n")])])]),e("img",{staticStyle:{zoom:"40%"},attrs:{src:a(524)}}),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -it 镜像ID /bin/bash \n")])])]),e("img",{staticStyle:{zoom:"40%"},attrs:{src:a(525)}}),t._v(" "),e("br"),t._v(" "),e("br"),t._v(" "),e("h2",{attrs:{id:"_8-数据卷"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-数据卷"}},[t._v("#")]),t._v(" 8. 数据卷")]),t._v(" "),e("h3",{attrs:{id:"_8-1-坑-容器卷记得加入"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-坑-容器卷记得加入"}},[t._v("#")]),t._v(" 8.1 坑：容器卷记得加入")]),t._v(" "),e("p",[e("code",[t._v("--privileged=true")])]),t._v(" "),e("p",[t._v("Docker挂载主机目录访问，如果出现 cannot open directory .: Permission denied")]),t._v(" "),e("p",[t._v("解决办法：在挂载目录后多加一个--privileged=true参数即可")]),t._v(" "),e("br"),t._v(" "),e("p",[t._v("如果是CentOS7安全模块会比之前系统版本加强，不安全的会先禁止，所以目录挂载的情况被默认为不安全的行为")]),t._v(" "),e("p",[t._v("在SELinux里面挂载目录被禁止，如果要开启，我们一般使用--privileged=true命令，扩大容器的权限解决挂载目录没有权限的问题，也即使用该参数，container内的root拥有真正的root权限，否则，container内的root只是外部的一个普通用户权限。")]),t._v(" "),e("h3",{attrs:{id:"_8-2-参数v"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-参数v"}},[t._v("#")]),t._v(" 8.2 参数V")]),t._v(" "),e("p",[t._v("还记得蓝色框框中的内容吗？")]),t._v(" "),e("img",{staticStyle:{zoom:"40%"},attrs:{src:a(526)}}),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 有点类似我们Redis里面的rdb和aof文件")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将docker容器内的数据保存进宿主机的磁盘中")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 运行一个带有容器卷存储功能的容器实例")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -it --privileged"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("true -v /宿主机绝对路径目录:/容器内目录      镜像名\n")])])]),e("p",[t._v("特点：")]),t._v(" "),e("ul",[e("li",[t._v("数据卷可在容器之间共享或重用数据")]),t._v(" "),e("li",[t._v("卷中的更改可以直接实时生效，爽")]),t._v(" "),e("li",[t._v("数据卷中的更改不会包含在镜像的更新中")]),t._v(" "),e("li",[t._v("数据卷的生命周期一直持续到没有容器使用它为止")])]),t._v(" "),e("h3",{attrs:{id:"_8-3-案例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-3-案例"}},[t._v("#")]),t._v(" 8.3 案例")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 公式：docker run -it -v /宿主机目录:/容器内目录")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -it --name myu3 --privileged"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("true -v /tmp/myHostData:/tmp/myDockerData ubuntu /bin/bash\n")])])]),e("img",{staticStyle:{zoom:"40%"},attrs:{src:a(527)}}),t._v(" "),e("br"),t._v(" "),e("br"),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#查看数据卷是否挂成功")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" inspect 容器ID\n")])])]),e("img",{staticStyle:{zoom:"60%"},attrs:{src:a(528)}}),t._v(" "),e("br"),t._v(" "),e("br"),t._v(" "),e("p",[t._v("容器和宿主机之间数据共享")]),t._v(" "),e("ul",[e("li",[t._v("docker修改，主机同步获得")]),t._v(" "),e("li",[t._v("主机修改，docker同步获得")])]),t._v(" "),e("br"),t._v(" "),e("br"),t._v(" "),e("h4",{attrs:{id:"_8-3-1-读写规则映射添加说明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-3-1-读写规则映射添加说明"}},[t._v("#")]),t._v(" 8.3.1 读写规则映射添加说明")]),t._v(" "),e("ol",[e("li",[t._v("读写(默认)")])]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -it --privileged"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("true -v /宿主机绝对路径目录:/容器内目录:rw  镜像名\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#默认同上案例，默认就是rw")]),t._v("\n")])])]),e("img",{staticStyle:{zoom:"40%"},attrs:{src:a(529)}}),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("只读")])]),t._v(" "),e("p",[t._v("容器实例内部被限制，只能读取不能写")]),t._v(" "),e("img",{staticStyle:{zoom:"40%"},attrs:{src:a(530)}}),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -it --privileged"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("true -v /宿主机绝对路径目录:/容器内目录:ro      镜像名\n")])])]),e("br"),t._v(" "),e("br"),t._v(" "),e("h4",{attrs:{id:"_8-3-2-卷的集成和共享"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-3-2-卷的集成和共享"}},[t._v("#")]),t._v(" 8.3.2 卷的集成和共享")]),t._v(" "),e("p",[t._v("容器1完成和宿主机的映射")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -it --privileged"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("true -v /mydocker/u:/tmp --name u1 ubuntu\n")])])]),e("img",{staticStyle:{zoom:"40%"},attrs:{src:a(531)}}),t._v(" "),e("br"),t._v(" "),e("p",[t._v("容器2集成容器1的卷规则")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -it --privileged"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("true --volumes-from 父类 --name u2 ubuntu\n")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);