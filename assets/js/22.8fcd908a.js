(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{427:function(_,v,t){_.exports=t.p+"assets/img/087.f9be9439.jpg"},428:function(_,v,t){_.exports=t.p+"assets/img/088.9afda9f0.jpg"},429:function(_,v,t){_.exports=t.p+"assets/img/089.1531fe9a.jpg"},777:function(_,v,t){"use strict";t.r(v);var i=t(65),s=Object(i.a)({},(function(){var _=this,v=_.$createElement,i=_._self._c||v;return i("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[i("h1",{attrs:{id:"git分布式版本控制工具"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git分布式版本控制工具"}},[_._v("#")]),_._v(" Git分布式版本控制工具")]),_._v(" "),i("h2",{attrs:{id:"_1-目标"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_1-目标"}},[_._v("#")]),_._v(" 1. 目标")]),_._v(" "),i("ul",[i("li",[_._v("了解 git 基本概念")]),_._v(" "),i("li",[_._v("能够概述 git 工作流程")]),_._v(" "),i("li",[_._v("能够使用 git 常用命令")]),_._v(" "),i("li",[_._v("熟悉 git 代码托管服务")]),_._v(" "),i("li",[_._v("能够使用 IDEA 操作 git")])]),_._v(" "),i("h2",{attrs:{id:"_2-概述"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_2-概述"}},[_._v("#")]),_._v(" 2. 概述")]),_._v(" "),i("h3",{attrs:{id:"_2-1-开发中的实际场景"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-开发中的实际场景"}},[_._v("#")]),_._v(" 2.1 开发中的实际场景")]),_._v(" "),i("p",[i("strong",[_._v("场景一：备份")])]),_._v(" "),i("p",[_._v("小明负责的模块就要完成了，就在即将Release之前的一瞬间，电脑突然蓝屏，硬盘光荣牺牲！几个月来的努力付之东流。")]),_._v(" "),i("br"),_._v(" "),i("p",[i("strong",[_._v("场景二：代码还原")])]),_._v(" "),i("p",[_._v("这个项目中需要一个很复杂的功能，老王摸索了一个星期终于有眉目了，可是这被改得面目全非的代码已经回不到从前了。什么地方能买到哆啦A梦的时光机啊？")]),_._v(" "),i("br"),_._v(" "),i("p",[i("strong",[_._v("场景三：协同开发")])]),_._v(" "),i("p",[_._v("小刚和小强先后从文件服务器上下载了同一个文件：Analysis.java。小刚在Analysis.java 文件中的第30行声明了一个方法，叫count()，先保存到了文件服务器上；小强在Analysis.java文件中的第50行声明了一个方法，叫sum()，也随后保存到了文件服务器上，于是，count()方法就只存在于小刚的记忆中了。")]),_._v(" "),i("br"),_._v(" "),i("p",[i("strong",[_._v("场景四：追溯问题代码的编写人和编写时间！")])]),_._v(" "),i("p",[_._v("老王是另一位项目经理，每次因为项目进度挨骂之后，他都不知道该扣哪个程序员的工资！就拿这次来说吧，有个Bug调试了30多个小时才知道是因为相关属性没有在应用初始化时赋值！可是二胖、王东、张三和小帅都不承认是自己干的！")]),_._v(" "),i("h3",{attrs:{id:"_2-2-版本控制器的方式"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-版本控制器的方式"}},[_._v("#")]),_._v(" 2.2 版本控制器的方式")]),_._v(" "),i("p",[i("strong",[_._v("a、集中式版本控制工具")])]),_._v(" "),i("p",[_._v("集中式版本控制工具，版本库是集中存放在中央服务器的，team里每个人work时从中央服务器下载代码，是必须联网才能工作，局域网或互联网。个人修改后然后提交到中央版本库。")]),_._v(" "),i("p",[_._v("举例："),i("code",[_._v("SVN")]),_._v(" 和 "),i("code",[_._v("CVS")])]),_._v(" "),i("br"),_._v(" "),i("p",[i("strong",[_._v("b、分布式版本控制工具")])]),_._v(" "),i("p",[_._v("分布式版本控制系统没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样工作的时候，无需要联网了，因为版本库就在你自己的电脑上。多人协作只需要各自的修改推送给对方，就能互相看到对方的修改了。")]),_._v(" "),i("p",[_._v("举例："),i("code",[_._v("Git")])]),_._v(" "),i("h3",{attrs:{id:"_2-3-svn"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-svn"}},[_._v("#")]),_._v(" 2.3 SVN")]),_._v(" "),i("br"),_._v(" "),i("img",{attrs:{height:"240px",src:t(427)}}),_._v(" "),i("br"),_._v(" "),i("h3",{attrs:{id:"_2-4-git"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-git"}},[_._v("#")]),_._v(" 2.4 Git")]),_._v(" "),i("p",[_._v("Git是分布式的，Git不需要有中心服务器，我们每台电脑拥有的东西都是一样的。我们使用 Git 并且有个中心服务器，仅仅是为了方便交换大家的修改，但是这个服务器的地位和我们每个人的PC是一样的。我们可以把中心服务器当做一个开发者的pc，方便大家交流代码不关机。没有它大家一样可以工作，只不过“交换”修改不方便而已。")]),_._v(" "),i("p",[_._v("Git 是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。Git是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。同生活中的许多伟大事物一样，Git 诞生于一个极富纷争大举创新的年代。Linux 内核开源项目有着为数众多的参与者。 绝大多数的 Linux 内核维护工作都花在了提交补丁和保存归档的繁琐事务上（1991－2002年间）。 到 2002 年，整个项目组开始启用一个专有的分布式版本控制系统 BitKeeper 来管理和维护代码。")]),_._v(" "),i("p",[_._v("到了 2005 年，开发 BitKeeper 的商业公司同 Linux 内核开源社区的合作关系结束，他们收回了 Linux 内核社区免费使用 BitKeeper 的权力。 这就迫使 Linux 开源社区（特别是 Linux 的缔造者 Linus Torvalds）基于使用 BitKeeper 时的经验教训，开发出自己的版本系统。 他们对新的系统制订了若干目标：")]),_._v(" "),i("ul",[i("li",[_._v("速度")]),_._v(" "),i("li",[_._v("简单的设计")]),_._v(" "),i("li",[_._v("对非线性开发模式的强力支持（允许成千上万个并行开发的分支）")]),_._v(" "),i("li",[_._v("完全分布式")]),_._v(" "),i("li",[_._v("有能力高效管理类似 Linux 内核一样的超大规模项目（速度和数据量）")])]),_._v(" "),i("img",{attrs:{height:"280px",src:t(428)}}),_._v(" "),i("br"),_._v(" "),i("br"),_._v(" "),i("br"),_._v(" "),i("br"),_._v(" "),i("br"),_._v(" "),i("h3",{attrs:{id:"_2-5-git工作流程图"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-git工作流程图"}},[_._v("#")]),_._v(" 2.5 Git工作流程图")]),_._v(" "),i("br"),_._v(" "),i("br"),_._v(" "),i("img",{attrs:{height:"160px",src:t(429)}}),_._v(" "),i("br"),_._v(" "),i("p",[_._v("命令如下：")]),_._v(" "),i("ol",[i("li",[i("code",[_._v("clone")]),_._v("（克隆）：从远程仓库中克隆代码到本地仓库")]),_._v(" "),i("li",[i("code",[_._v("checkout")]),_._v(" （检出）：在本地仓库中，切换到另一个分支")]),_._v(" "),i("li",[i("code",[_._v("add")]),_._v("（添加）：将修改的代码提交到暂存区")]),_._v(" "),i("li",[i("code",[_._v("commit")]),_._v("（提交）：提交到本地仓库。本地仓库中保存修改的各个历史版本")]),_._v(" "),i("li",[i("code",[_._v("fetch")]),_._v("（抓取）：从远程库，抓取commit-id到本地仓库，不进行任何的合并动作（检查远程仓库是否有更新）")]),_._v(" "),i("li",[i("code",[_._v("pull")]),_._v("（拉取）：从远程库拉到本地库，自动进行合并(merge)，然后放到到工作区，相当于\nfetch+merge")]),_._v(" "),i("li",[i("code",[_._v("push")]),_._v("（推送）：修改完成后，需要和团队成员共享代码时，将代码推送到远程仓库")])])])}),[],!1,null,null,null);v.default=s.exports}}]);