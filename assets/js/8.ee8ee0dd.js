(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{442:function(t,s,a){t.exports=a.p+"assets/img/24.a7e84e03.png"},443:function(t,s,a){t.exports=a.p+"assets/img/25.f2b8a8d7.png"},444:function(t,s,a){t.exports=a.p+"assets/img/27.9215a95e.png"},445:function(t,s,a){t.exports=a.p+"assets/img/30.dd9683d4.png"},446:function(t,s,a){t.exports=a.p+"assets/img/31.ece27757.png"},447:function(t,s,a){t.exports=a.p+"assets/img/32.206e9740.png"},448:function(t,s,a){t.exports=a.p+"assets/img/36.d905a5c5.png"},449:function(t,s,a){t.exports=a.p+"assets/img/37.4745cee9.png"},450:function(t,s,a){t.exports=a.p+"assets/img/38.a2c92ab8.png"},451:function(t,s,a){t.exports=a.p+"assets/img/39.c8f9e338.png"},452:function(t,s,a){t.exports=a.p+"assets/img/40.d6d841e3.png"},453:function(t,s,a){t.exports=a.p+"assets/img/41.f265d995.png"},454:function(t,s,a){t.exports=a.p+"assets/img/42.46cd2978.png"},455:function(t,s,a){t.exports=a.p+"assets/img/43.570b0f06.png"},456:function(t,s,a){t.exports=a.p+"assets/img/44.407111d7.png"},457:function(t,s,a){t.exports=a.p+"assets/img/45.0d8c1036.png"},458:function(t,s,a){t.exports=a.p+"assets/img/46.9946ef41.png"},459:function(t,s,a){t.exports=a.p+"assets/img/47.4ae34e05.png"},460:function(t,s,a){t.exports=a.p+"assets/img/48.a7a6be80.png"},461:function(t,s,a){t.exports=a.p+"assets/img/49.a02efba3.png"},462:function(t,s,a){t.exports=a.p+"assets/img/50.881a5432.png"},463:function(t,s,a){t.exports=a.p+"assets/img/51.e0827b1c.png"},464:function(t,s,a){t.exports=a.p+"assets/img/52.09e7c06e.png"},465:function(t,s,a){t.exports=a.p+"assets/img/71.87d0b331.png"},466:function(t,s,a){t.exports=a.p+"assets/img/72.fd477917.png"},467:function(t,s,a){t.exports=a.p+"assets/img/73.c3f9dca1.png"},950:function(t,s,a){"use strict";a.r(s);var n=a(65),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"高级部分"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#高级部分"}},[t._v("#")]),t._v(" 高级部分")]),t._v(" "),n("h2",{attrs:{id:"_1-dockerfile"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-dockerfile"}},[t._v("#")]),t._v(" 1. Dockerfile")]),t._v(" "),n("p",[t._v("Dockerfile 是用来构建Docker镜像的文本文件，是由一条条构建镜像所需的指令和参数构成的脚本。")]),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:a(442)}}),t._v(" "),n("br"),t._v(" "),n("p",[t._v("官网：https://docs.docker.com/engine/reference/builder")]),t._v(" "),n("br"),t._v(" "),n("p",[t._v("构建三步骤")]),t._v(" "),n("ol",[n("li",[t._v("编写DockerFile文件")]),t._v(" "),n("li",[t._v("docker build命令构建镜像")]),t._v(" "),n("li",[t._v("docker run 依镜像运行容器实例")])]),t._v(" "),n("h3",{attrs:{id:"_1-1-构建过程解析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-构建过程解析"}},[t._v("#")]),t._v(" 1.1 构建过程解析")]),t._v(" "),n("p",[t._v("DockerFile内容基础知识")]),t._v(" "),n("ol",[n("li",[t._v("每条保留字指令都必须为大写字母且后面跟随至少一个参数")]),t._v(" "),n("li",[t._v("指令按照从上到下，顺序执行")]),t._v(" "),n("li",[n("code",[t._v("#")]),t._v(" 表示注释")]),t._v(" "),n("li",[t._v("每条指令都会创建一个新的镜像层并对镜像进行提交")])]),t._v(" "),n("br"),t._v(" "),n("br"),t._v(" "),n("p",[t._v("Docker执行DockerFile的大致流程")]),t._v(" "),n("ol",[n("li",[t._v("docker从基础镜像运行一个容器")]),t._v(" "),n("li",[t._v("执行一条指令，对容器做出修改")]),t._v(" "),n("li",[t._v("执行类似 docker commit 的操作提交一个新的镜像层")]),t._v(" "),n("li",[t._v("docker 在基于刚提交的镜像运行一个新容器")]),t._v(" "),n("li",[t._v("执行dockerfile中的下一条指令直到所有执行执行完成")])]),t._v(" "),n("h3",{attrs:{id:"_1-2-小结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-小结"}},[t._v("#")]),t._v(" 1.2 小结")]),t._v(" "),n("p",[t._v("从应用软件的角度来看，Dockerfile、Docker镜像与Docker容器分别代表软件的三个不同阶段：")]),t._v(" "),n("ul",[n("li",[t._v("Dockerfile是软件的原材料")]),t._v(" "),n("li",[t._v("Docker镜像是软件的交付品")]),t._v(" "),n("li",[t._v("Docker容器则可以认为是软件镜像的运行态，也即依照镜像运行的容器实例")])]),t._v(" "),n("p",[t._v("Dockerfile面向开发，Docker镜像成为交付标准，Docker容器则涉及部署与运维，三者缺一不可，合力充当Docker体系的基石。")]),t._v(" "),n("img",{staticStyle:{zoom:"60%"},attrs:{src:a(443)}}),t._v(" "),n("br"),t._v(" "),n("ol",[n("li",[t._v("Dockerfile，需要定义一个Dockerfile，Dockerfile定义了进程需要的一切东西。Dockerfile涉及的内容包括执行代码或者是文件、环境变量、依赖包、运行时环境、动态链接库、操作系统的发行版、服务进程和内核进程（当应用进程需要和系统服务和内核进程打交道，这时需要考虑如何设计namespace的权限控制）等等")]),t._v(" "),n("li",[t._v("Docker镜像，在用Dockerfile定义一个文件之后，docker build时会产生一个Docker镜像，当运行 Docker 镜像时会真正开始提供服务")]),t._v(" "),n("li",[t._v("Docker容器，容器是直接提供服务的")])]),t._v(" "),n("h3",{attrs:{id:"_1-3-常用指令"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-常用指令"}},[t._v("#")]),t._v(" 1.3 常用指令")]),t._v(" "),n("div",{staticClass:"language-dockerfile extra-class"},[n("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[n("code",[n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v("       #基础镜像，当前新镜像是基于哪个镜像的，指定一个已经存在的镜像作为模板，第一条必须是 FROM")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MAINTAINER")]),t._v(" #镜像维护者的姓名和邮箱地址")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v("        #容器构建时需要运行的命令，RUN是在docker build时运行")]),t._v("\n           "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#两种格式：")]),t._v("\n           "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#1.shell格式 （ RUN yum -y install vim ）")]),t._v("\n           "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#2.exec格式  （ RUN ["可执行文件", "参数1", "参数2"] ）')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("EXPOSE")]),t._v("     #当前容器对外暴露出的端口")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WORKDIR")]),t._v("    #指定在创建容器后。终端默认登录的进来工作目录，一个落脚点")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("USER")]),t._v("       #指定该镜像以什么样的用户去执行，如果都不指定，默认是root")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENV")]),t._v("        #用来在构建镜像过程中设置环境变量")]),t._v("\n           "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#ENV MY_PATH /usr/mytest")]),t._v("\n           "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#这个环境变量可以在后续的任何RUN指令中使用，这就如同在命令前面指定了环境变量前缀一样")]),t._v("\n           "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#也可以在其它指令中直接使用这些环境变量")]),t._v("\n           "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#比如：WORKDIR $MY_PATH")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v("        #将宿主机目录下的文件拷贝进镜像且会自动处理URL和解压tar压缩包")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v("       #类似ADD，拷贝文件和目录到镜像中。")]),t._v("\n           "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#将从构建上下文目录中<源路径>的文件/目录复制到新的一层镜像内的<目标路径>位置")]),t._v("\n           "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#COPY src dest")]),t._v("\n           "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#COPY["src","dest"]')]),t._v("\n           "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#<src源路径>：源文件或源目录")]),t._v("\n           "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#<dest目标路径>: 容器内的指定路径，该路径不用事先建好，路径不存在的话，会自动创建")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VOLUME")]),t._v("     #容器数据卷，用于数据保存和持久化的工作")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CMD")]),t._v("        #指定容器启动后的要干的事情")]),t._v("\n           "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#Dockerfile中可以由多个CMD指令，但是只有最后一个生效，CMD会被docker run之后的参数替换")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENTRYPOINT")]),t._v(" #也是用来指定一个容器启动时要运行的命令")]),t._v("\n           "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#类似于CMD指令，但是ENTRYPOINT不会被docker run后面的命令覆盖")]),t._v("\n           "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#而且这些命令行参数会被当作参数送给ENTRYPOINT指令指定的程序")]),t._v("\n           "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#命令格式：ENTRYPOINT["<executeable>","<param1>","<param2>",...]')]),t._v("\n           "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#ENTRYPOINT可以和CMD一起用，一般是`变参`才会使用CMD ，这里的CMD等于是在给ENTRYPOINT传参")]),t._v("\n           "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#当制定了ENTRYPOINT后，CMD的含义就发生了变化，不再是直接运行其命令")]),t._v("\n           "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#而是将CMD的内容作为参数传递给ENTRYPOINT，他两个组合会变成<ENTRYPOINT> "<CMD>"')]),t._v("\n")])])]),n("p",[t._v("案例：ENTRYPOINT 和 CMD一起使用，假设已通过 Dockerfile 构建了 nginx:test 镜像")]),t._v(" "),n("img",{staticStyle:{zoom:"70%"},attrs:{src:a(444)}}),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("是否传参")]),t._v(" "),n("th",[t._v("按照Dockerfile编写执行")]),t._v(" "),n("th",[t._v("传参运行")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("Docker命令")]),t._v(" "),n("td",[t._v("docker run nginx:test")]),t._v(" "),n("td",[t._v("docker run nginx:test -c /etc/nginx/ new.conf")])]),t._v(" "),n("tr",[n("td",[t._v("衍生出的实际命令")]),t._v(" "),n("td",[t._v("nginx -c /etc/nginx/nginx.conf")]),t._v(" "),n("td",[t._v("nginx -c /etc/nginx/ new.conf")])])])]),t._v(" "),n("p",[t._v("优点：在执行docker run 的时候可以指定 ENTRYPOINT 运行所需的参数。")]),t._v(" "),n("p",[t._v("注意：如果Dockerfile 中如果存在多个 ENTRYPOINT 指令，进最后一个生效。")]),t._v(" "),n("h3",{attrs:{id:"_1-4-案例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-案例"}},[t._v("#")]),t._v(" 1.4 案例")]),t._v(" "),n("p",[n("strong",[t._v("1. 要求")])]),t._v(" "),n("blockquote",[n("p",[t._v("Centos7镜像具备 vim + ifconfig + jdk8")])]),t._v(" "),n("br"),t._v(" "),n("p",[n("strong",[t._v("2. 编写Dockerfile")])]),t._v(" "),n("div",{staticClass:"language-dockerfile extra-class"},[n("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[n("code",[n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" centos")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MAINTAINER")]),t._v(" zzyy<zzyybs@126.com> ")]),t._v("\n  \n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENV")]),t._v(" MYPATH /usr/local ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WORKDIR")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$MYPATH")]),t._v(" ")]),t._v("\n  \n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#安装vim编辑器 ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" yum -y install vim ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#安装ifconfig命令查看网络IP ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" yum -y install net-tools ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#安装java8及lib库 ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" yum -y install glibc.i686 ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" mkdir /usr/local/java ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#ADD 是相对路径jar,把jdk-8u171-linux-x64.tar.gz添加到容器中,安装包必须要和Dockerfile文件在同一位置 ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" jdk-8u171-linux-x64.tar.gz /usr/local/java/ ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#配置java环境变量 ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENV")]),t._v(" JAVA_HOME /usr/local/java/jdk1.8.0_171 ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENV")]),t._v(" JRE_HOME "),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$JAVA_HOME")]),t._v("/jre ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENV")]),t._v(" CLASSPATH "),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$JAVA_HOME")]),t._v("/lib/dt.jar:"),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$JAVA_HOME")]),t._v("/lib/tools.jar:"),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$JRE_HOME")]),t._v("/lib:"),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$CLASSPATH")]),t._v(" ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENV")]),t._v(" PATH "),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$JAVA_HOME")]),t._v("/bin:"),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$PATH")]),t._v(" ")]),t._v("\n  \n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("EXPOSE")]),t._v(" 80 ")]),t._v("\n \n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CMD")]),t._v(" echo "),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$MYPATH")]),t._v(" ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CMD")]),t._v(" echo "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"success--------------ok"')]),t._v(" ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CMD")]),t._v(" /bin/bash ")]),t._v("\n")])])]),n("p",[n("br"),n("strong",[t._v("3. 构建")])]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" build -t 新镜像名字: TAG\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 例如：docker build -t centosjava8:1.5 .")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#【注意】")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#上面TAG 后面有个空格，有个点")]),t._v("\n")])])]),n("br"),t._v(" "),n("p",[n("strong",[t._v("4. 运行")])]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -it 新镜像名字:TAG\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -it centosjava8:1.5 /bin/bash\n")])])]),n("blockquote",[n("p",[n("strong",[t._v("再体会下UnionFS（联合文件系统）")])]),t._v(" "),n("ul",[n("li",[t._v("UnionFS（联合文件系统）：Union文件系统（UnionFS）是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加， 同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtual filesystem)。Union 文件系统是 Docker 镜像的基础。 镜像可以通过分层来进行继承 ，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像")]),t._v(" "),n("li",[t._v("特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录")])])]),t._v(" "),n("h3",{attrs:{id:"_1-5-虚悬镜像"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-虚悬镜像"}},[t._v("#")]),t._v(" 1.5 虚悬镜像")]),t._v(" "),n("p",[t._v("仓库名，标签都是 "),n("code",[t._v("<none>")]),t._v(" 的镜像，俗称 dangling image。")]),t._v(" "),n("br"),t._v(" "),n("p",[n("strong",[t._v("Dockerfile写一个虚悬镜像")])]),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:a(445)}}),t._v(" "),n("br"),t._v(" "),n("p",[n("strong",[t._v("查看")])]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" image "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" -f "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("dangling")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("true\n")])])]),n("p",[t._v("命令结果如下图：")]),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:a(446)}}),t._v(" "),n("br"),t._v(" "),n("p",[n("strong",[t._v("删除")])]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#虚悬镜像已经市区存在价值，可以删除")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" image prune\n")])])]),n("img",{staticStyle:{zoom:"50%"},attrs:{src:a(447)}}),t._v(" "),n("h2",{attrs:{id:"_2-docker网络"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-docker网络"}},[t._v("#")]),t._v(" 2. Docker网络")]),t._v(" "),n("h3",{attrs:{id:"_2-1-docker网络是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-docker网络是什么"}},[t._v("#")]),t._v(" 2.1 Docker网络是什么")]),t._v(" "),n("p",[n("strong",[t._v("docker不启动，默认网络情况")])]),t._v(" "),n("ul",[n("li",[t._v("ens 33")]),t._v(" "),n("li",[t._v("lo")]),t._v(" "),n("li",[t._v("virbr0")])]),t._v(" "),n("img",{staticStyle:{zoom:"60%"},attrs:{src:a(448)}}),t._v(" "),n("br"),t._v(" "),n("p",[t._v("在 CentOS7 的安装过程中如果有选择相关虚拟化的的服务，安装系统后 ，启动网卡时会发现有一个以网桥连接的私网地址的 "),n("code",[t._v("virbr0网卡")]),t._v(" (virbr0网卡：它还有一个固定的默认IP地址192.168.122.1)，是做虚拟机网桥的使用的，其作用是为连接其上的虚机网卡提供 NAT访问外网的功能。")]),t._v(" "),n("p",[t._v("我们之前学习Linux安装，勾选安装系统的时候附带了 "),n("code",[t._v("libvirt服务")]),t._v(" 才会生成的一个东西，如果不需要可以直接将libvirtd服务卸载")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("yum remove libvirt-libs.x86_64 \n")])])]),n("br"),t._v(" "),n("br"),t._v(" "),n("br"),t._v(" "),n("p",[n("strong",[t._v("docker启动后网络情况")])]),t._v(" "),n("p",[t._v("查看docker网络模式命令")]),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:a(449)}}),t._v(" "),n("br"),t._v(" "),n("h3",{attrs:{id:"_2-2-常用基本命令"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-常用基本命令"}},[t._v("#")]),t._v(" 2.2 常用基本命令")]),t._v(" "),n("h4",{attrs:{id:"_2-2-1-所有命令"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-所有命令"}},[t._v("#")]),t._v(" 2.2.1 所有命令")]),t._v(" "),n("br"),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:a(450)}}),t._v(" "),n("h4",{attrs:{id:"_2-2-2-查看网络"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-查看网络"}},[t._v("#")]),t._v(" 2.2.2 查看网络")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" network "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v("\n")])])]),n("h4",{attrs:{id:"_2-2-3-查看网络源数据"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-查看网络源数据"}},[t._v("#")]),t._v(" 2.2.3 查看网络源数据")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" network inspect  XXX网络名字\n")])])]),n("h4",{attrs:{id:"_2-2-4-删除网络"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-4-删除网络"}},[t._v("#")]),t._v(" 2.2.4 删除网络")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" network "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" XXX网络名字\n")])])]),n("h4",{attrs:{id:"_2-2-5-案例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-5-案例"}},[t._v("#")]),t._v(" 2.2.5 案例")]),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:a(451)}}),t._v(" "),n("br"),t._v(" "),n("h3",{attrs:{id:"_2-3-能干嘛"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-能干嘛"}},[t._v("#")]),t._v(" 2.3 能干嘛")]),t._v(" "),n("p",[t._v("容器间的互联和通信以及端口映射")]),t._v(" "),n("p",[t._v("容器IP变动时候可以通过服务名直接网络通信而不受到影响")]),t._v(" "),n("h3",{attrs:{id:"_2-4-网络模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-网络模式"}},[t._v("#")]),t._v(" 2.4 网络模式")]),t._v(" "),n("h4",{attrs:{id:"_2-4-1-总体介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-1-总体介绍"}},[t._v("#")]),t._v(" 2.4.1 总体介绍")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("bridge模式")]),t._v("：使用 --network bridge 指定，默认使用docker()")]),t._v(" "),n("li",[n("code",[t._v("host模式")]),t._v("：使用 --network host 指定")]),t._v(" "),n("li",[n("code",[t._v("none模式")]),t._v("：使用 --network none 指定")]),t._v(" "),n("li",[n("code",[t._v("container模式")]),t._v("：使用 --network container:Name 或者 容器ID 指定")])]),t._v(" "),n("h4",{attrs:{id:"_2-4-2-容器默认网络ip规则"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-2-容器默认网络ip规则"}},[t._v("#")]),t._v(" 2.4.2 容器默认网络IP规则")]),t._v(" "),n("ol",[n("li",[t._v("先启动两个ubuntu容器实例")])]),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:a(452)}}),t._v(" "),n("br"),t._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[t._v("docker inspect 容器ID or 容器名字")])]),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:a(453)}}),t._v(" "),n("br"),t._v(" "),n("ol",{attrs:{start:"3"}},[n("li",[t._v("关闭u2实例，新建u3，查看ip变化")])]),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:a(454)}}),t._v(" "),n("br"),t._v(" "),n("h4",{attrs:{id:"_2-4-3-案例说明"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-3-案例说明"}},[t._v("#")]),t._v(" 2.4.3 案例说明")]),t._v(" "),n("p",[n("strong",[t._v("1. bridge")])]),t._v(" "),n("p",[t._v("Docker 服务默认会创建一个 docker0 网桥（其上有一个 docker0 内部接口），该桥接网络的名称为docker0，它在 "),n("code",[t._v("内核层")]),t._v(" 连通了其他的物理或虚拟网卡，这就将所有容器和本地主机都放到 同一个物理网络。Docker 默认指定了docker0接口的 IP地址和 子网掩码， 让主机和容器之间可以通过网桥相互通信。")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看 bridge 网络的详细信息，并通过 grep 获取名称项 ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" network inspect bridge "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" name\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ifconfig")]),t._v("\n")])])]),n("p",[t._v("案例")]),t._v(" "),n("blockquote",[n("p",[t._v("Docker使用Linux桥接，在宿主机虚拟一个Docker容器网桥(docker0)，Docker启动一个容器时会根据Docker网桥的网段分配给容器一个IP地址，称为Container-IP，同时Docker网桥是每个容器的默认网关。因为在同一宿主机内的容器都接入同一个网桥，这样容器之间就能够通过容器的Container-IP直接通信。")]),t._v(" "),n("br"),t._v(" "),n("br"),t._v(" "),n("p",[t._v("docker run 的时候，没有指定network的话默认使用的网桥模式就是bridge，使用的就是docker0 。在宿主机ifconfig，就可以看到 docker0 和自己create的network（后面讲）。eth0，eth1，eth2……代表网卡一，网卡二，网卡三…… ，lo代表127.0.0.1，即localhost ，inet addr用来表示网卡的IP地址")]),t._v(" "),n("br"),t._v(" "),n("br"),t._v(" "),n("p",[t._v("网桥docker0创建一对对等虚拟设备接口一个叫veth，另一个叫eth0，成对匹配。")]),t._v(" "),n("ul",[n("li",[t._v("整个宿主机的网桥模式都是docker0，类似一个交换机有一堆接口，每个接口叫veth，在本地主机和容器内分别创建一个虚拟接口，并让他们彼此联通（这样一对接口叫veth pair）")]),t._v(" "),n("li",[t._v("每个容器实例内部也有一块网卡，每个接口叫eth0")]),t._v(" "),n("li",[t._v("docker0上面的每个veth匹配某个容器实例内部的eth0，两两配对，一一匹配")])]),t._v(" "),n("br"),t._v(" "),n("br"),t._v(" "),n("p",[t._v("通过上述，将宿主机上的所有容器都连接到这个内部网络上，两个容器在同一个网络下，会从这个网关下各自拿到分配的ip，此时两个容器的网络是互通的。")])]),t._v(" "),n("img",{staticStyle:{zoom:"60%"},attrs:{src:a(455)}}),t._v(" "),n("br"),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -d -p "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8081")]),t._v(":8080   --name tomcat81 billygoo/tomcat8-jdk8\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -d -p "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8082")]),t._v(":8080   --name tomcat82 billygoo/tomcat8-jdk8\n")])])]),n("p",[t._v("两两匹配验证")]),t._v(" "),n("img",{staticStyle:{zoom:"60%"},attrs:{src:a(456)}}),t._v(" "),n("br"),t._v(" "),n("br"),t._v(" "),n("br"),t._v(" "),n("p",[n("strong",[t._v("2. Host")])]),t._v(" "),n("p",[t._v("直接使用宿主机的IP地址与外界进行通信，不再需要额外进行NAT转换。")]),t._v(" "),n("p",[t._v("容器将不会获得 一个独立的Network Namespace， 而是和宿主机共用一个Network Namespace。 容器将不会虚拟出自己的网卡而是使用宿主机的IP和端口。")]),t._v(" "),n("br"),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#警告")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -d -p "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8083")]),t._v(":8080 --network "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("host")]),t._v(" --name tomcat83 billygoo/tomcat8-jdk8\n \n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#正确")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -d --network "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("host")]),t._v(" --name tomcat83 billygoo/tomcat8-jdk8\n")])])]),n("p",[t._v("无之前的配对显示了，看容器实例内部")]),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:a(457)}}),t._v(" "),n("br"),t._v(" "),n("p",[t._v("没有设置 "),n("code",[t._v("-p")]),t._v(" 的端口映射了，如何访问启动的tomcat83？")]),t._v(" "),n("blockquote",[n("p",[t._v("http://宿主机IP:8080/")])]),t._v(" "),n("p",[t._v("在CentOS里面用默认的火狐浏览器访问容器内的tomcat83看到访问成功，因为此时容器的IP借用主机的，\n所以容器共享宿主机网络IP，这样的好处是外部主机与容器可以直接通信。")]),t._v(" "),n("br"),t._v(" "),n("br"),t._v(" "),n("br"),t._v(" "),n("p",[n("strong",[t._v("3. none")])]),t._v(" "),n("p",[t._v("禁用网络功能，只有lo标识（就是127.0.0.1表示本地回环）")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -d -p8084:8080 --network none --name tomcat84 billygoo/tomcat8-jdk8\n")])])]),n("br"),t._v(" "),n("br"),t._v(" "),n("br"),t._v(" "),n("p",[n("strong",[t._v("4. container")])]),t._v(" "),n("p",[t._v("新建的容器和已经存在的一个容器共享一个网络ip配置而不是和宿主机共享。新创建的容器不会创建自己的网卡，配置自己的IP，而是和一个指定的容器共享IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。")]),t._v(" "),n("p",[t._v("案例1")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -d -p "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8085")]),t._v(":8080 --name tomcat85 billygoo/tomcat8-jdk8\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -d -p "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8086")]),t._v(":8080 --network container:tomcat85 --name tomcat86 billygoo/tomcat8-jdk8\n")])])]),n("p",[t._v("运行结果")]),t._v(" "),n("blockquote",[n("p",[t._v("docker：Error response from daemon: conflicting optisons: port ...........")])]),t._v(" "),n("p",[t._v("tomcat86 和 tomcat85 公用同一个ip同一个端口，导致端口冲突")]),t._v(" "),n("br"),t._v(" "),n("p",[t._v("案例2")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#Alpine操作系统是一个面向安全的轻型 Linux发行版")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -it --name alpine1 alpine /bin/sh\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -it --network container:alpine1 --name alpine2  alpine /bin/sh\n")])])]),n("p",[t._v("运行结果，验证共用搭桥")]),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:a(458)}}),t._v(" "),n("br"),t._v(" "),n("p",[t._v("假如此时关闭alpine1，再看看alpine2")]),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:a(459)}}),t._v(" "),n("br"),t._v(" "),n("br"),t._v(" "),n("br"),t._v(" "),n("p",[n("strong",[t._v("4. 自定义网络")])]),t._v(" "),n("p",[t._v("过时的link")]),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:a(460)}}),t._v(" "),n("br"),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -d -p "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8081")]),t._v(":8080   --name tomcat81 billygoo/tomcat8-jdk8\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -d -p "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8082")]),t._v(":8080   --name tomcat82 billygoo/tomcat8-jdk8\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#上述成功启动并用docker exec进入各自容器实例内部")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#问题：")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1. 按照IP地址ping是OK的")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2. 按照服务名ping结果?")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ping： tocmat82：Name or service not known")]),t._v("\n")])])]),n("p",[t._v("自定义桥接网络，自定义网络默认使用的是桥接网络bridge")]),t._v(" "),n("p",[t._v("新建自定义网络")]),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:a(461)}}),t._v(" "),n("p",[t._v("新建容器加入上一步新建的自定义网络")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -d -p "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8081")]),t._v(":8080 --network zzyy_network  --name tomcat81 billygoo/tomcat8-jdk8\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -d -p "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8082")]),t._v(":8080 --network zzyy_network  --name tomcat82 billygoo/tomcat8-jdk8\n")])])]),n("p",[t._v("互相 ping 测试")]),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:a(462)}}),t._v(" "),n("p",[t._v("问题结论")]),t._v(" "),n("p",[n("strong",[t._v("自定义网络本身就维护好了主机名和ip的对应关系（ip和域名都能通）")])]),t._v(" "),n("h2",{attrs:{id:"_3-docker平台架构图解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-docker平台架构图解"}},[t._v("#")]),t._v(" 3. Docker平台架构图解")]),t._v(" "),n("p",[t._v("从其架构和运行流程来看，Docker 是一个 C/S 模式的架构，后端是一个松耦合架构，众多模块各司其职。")]),t._v(" "),n("p",[t._v("Docker 运行的基本流程为：")]),t._v(" "),n("ol",[n("li",[t._v("用户是使用 Docker Client 与 Docker Daemon 建立通信，并发送请求给后者。")]),t._v(" "),n("li",[t._v("Docker Daemon 作为 Docker 架构中的主体部分，首先提供 Docker Server 的功能使其可以接受 Docker Client 的请求。")]),t._v(" "),n("li",[t._v("Docker Engine 执行 Docker 内部的一系列工作，每一项工作都是以一个 Job 的形式的存在。")]),t._v(" "),n("li",[t._v("Job 的运行过程中，当需要容器镜像时，则从 Docker Registry 中下载镜像，并通过镜像管理驱动 Graph driver 将下载镜像以Graph的形式存储。")]),t._v(" "),n("li",[t._v("当需要为 Docker 创建网络环境时，通过网络管理驱动 Network driver 创建并配置 Docker 容器网络环境。")]),t._v(" "),n("li",[t._v("当需要限制 Docker 容器运行资源或执行用户指令等操作时，则通过 Execdriver 来完成。")]),t._v(" "),n("li",[t._v("Libcontainer是一项独立的容器管理包，Network driver 以及 Exec driver 都是通过Libcontainer来实现具体对容器进行的操作。")])]),t._v(" "),n("img",{staticStyle:{zoom:"60%"},attrs:{src:a(463)}}),t._v(" "),n("h2",{attrs:{id:"_4-docker-compose"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-docker-compose"}},[t._v("#")]),t._v(" 4. Docker Compose")]),t._v(" "),n("p",[t._v("Docker-Compose是Docker官方的开源项目，负责实现对Docker容器集群的快速编排。")]),t._v(" "),n("br"),t._v(" "),n("p",[t._v("Docker建议我们每一个容器中只运行一个服务，因为docker容器本身占用资源极少，所以最好是将每个服务单独的分割开来。但是这样我们又面临了一个问题？")]),t._v(" "),n("p",[t._v("如果我需要同时部署好多个服务，难道要每个服务单独写 Dockerfile 然后在构建镜像，构建容器，这样累都累死了，所以docker官方给我们提供了docker compose多服务部署的工具。")]),t._v(" "),n("p",[t._v("例如要实现一个Web微服务项目，除了Web服务容器本身，往往还需要再加上后端的数据库mysql服务容器，redis服务器，注册中心eureka，甚至还包括负载均衡容器等等。。。")]),t._v(" "),n("p",[t._v("Compose允许用户通过一个单独的 "),n("code",[t._v("docker-compose.yml")]),t._v(" 模板文件 （YAML 格式）来定义一组相关联的应用容器为一个项目（project）。")]),t._v(" "),n("p",[t._v("可以很容易地用一个配置文件定义一个多容器的应用，然后使用一条指令安装这个应用的所有依赖，完成构建。Docker Compose 解决了容器与容器之间如何管理编排的问题。")]),t._v(" "),n("h3",{attrs:{id:"_4-1-安装"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-安装"}},[t._v("#")]),t._v(" 4.1 安装")]),t._v(" "),n("p",[t._v("官网：https://docs.docker.com/compose/compose-file/compose-file-v3/")]),t._v(" "),n("p",[t._v("下载：https://docs.docker.com/compose/install/")]),t._v(" "),n("br"),t._v(" "),n("p",[t._v("安装步骤")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -L "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-'),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("uname")]),t._v(" -s"),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v("-"),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("uname")]),t._v(" -m"),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v('"')]),t._v(" -o /usr/local/bin/docker-compose \n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("chmod")]),t._v(" +x /usr/local/bin/docker-compose \n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" --version\n")])])]),n("img",{staticStyle:{zoom:"80%"},attrs:{src:a(464)}}),t._v(" "),n("br"),t._v(" "),n("br"),t._v(" "),n("p",[t._v("卸载步骤")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" /usr/local/bin/docker-compose\n")])])]),n("h3",{attrs:{id:"_4-2-核心概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-核心概念"}},[t._v("#")]),t._v(" 4.2 核心概念")]),t._v(" "),n("h4",{attrs:{id:"_4-2-1-一文件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-1-一文件"}},[t._v("#")]),t._v(" 4.2.1 一文件")]),t._v(" "),n("p",[t._v("docker-compose.yml")]),t._v(" "),n("h4",{attrs:{id:"_4-2-2-两要素"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-2-两要素"}},[t._v("#")]),t._v(" 4.2.2 两要素")]),t._v(" "),n("p",[t._v("服务(service)：")]),t._v(" "),n("p",[t._v("一个个应用容器实例，比如订单微服务、库存微服务、mysql容器、nginx容器或者redis容器。")]),t._v(" "),n("br"),t._v(" "),n("p",[t._v("工程(project)：")]),t._v(" "),n("p",[t._v("由一组关联的应用容器组成的一个完整业务单元，在 docker-compose.yml 文件中定义。")]),t._v(" "),n("h3",{attrs:{id:"_4-3-使用compose"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-使用compose"}},[t._v("#")]),t._v(" 4.3 使用Compose")]),t._v(" "),n("ol",[n("li",[t._v("编写 Dockerfile 定义各个微服务应用并构建出对应的镜像文件")]),t._v(" "),n("li",[t._v("使用 docker-compose.yml 定义一个完整业务单元，安排好整体应用中的各个容器服务")]),t._v(" "),n("li",[t._v("最后，执行 docker-compose up 命令 来启动并运行整个应用程序，完成一键部署上线")])]),t._v(" "),n("h3",{attrs:{id:"_4-4-常用命令"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-常用命令"}},[t._v("#")]),t._v(" 4.4 常用命令")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" -h                           "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  查看帮助 ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" up                           "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  启动所有 docker-compose服务 ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" up -d                        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  启动所有 docker-compose服务 并后台运行 ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" down                         "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  停止并删除容器、网络、卷、镜像。 ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exec")]),t._v("  yml里面的服务id        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 进入容器实例内部  docker-compose exec  docker-compose.yml文件中写的服务id  /bin/bash ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v("                      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 展示当前docker-compose编排过的运行的所有容器 ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("top")]),t._v("                     "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 展示当前docker-compose编排过的容器进程 ")]),t._v("\n \n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" logs  yml里面的服务id    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  查看容器输出日志 ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" config     "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  检查配置 ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" config -q  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  检查配置，有问题才有输出 ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" restart    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  重启服务 ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" start      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  启动服务 ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" stop       "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  停止服务 ")]),t._v("\n")])])]),n("h3",{attrs:{id:"_4-5-示例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-示例"}},[t._v("#")]),t._v(" 4.5 示例")]),t._v(" "),n("p",[t._v("docker-componse.yml")]),t._v(" "),n("div",{staticClass:"language-yaml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-yaml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("version")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3"')]),t._v(" \n  \n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("services")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n  microService"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n    image"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" zzyy_docker"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.6")]),t._v(" \n    container_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ms01 \n    ports"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"6001:6001"')]),t._v(" \n    volumes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" /app/microService"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("/data \n    networks"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("  \n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" atguigu_net  \n    depends_on"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("  \n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" redis \n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" mysql \n  \n  redis"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n    image"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" redis"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("6.0.8 \n    ports"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"6379:6379"')]),t._v(" \n    volumes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" /app/redis/redis.conf"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("/etc/redis/redis.conf \n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" /app/redis/data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("/data \n    networks"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("  \n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" atguigu_net \n    command"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" redis"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("server /etc/redis/redis.conf \n  \n  mysql"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n    image"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" mysql"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.7")]),t._v(" \n    environment"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n      MYSQL_ROOT_PASSWORD"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'123456'")]),t._v(" \n      MYSQL_ALLOW_EMPTY_PASSWORD"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'no'")]),t._v(" \n      MYSQL_DATABASE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'db2021'")]),t._v(" \n      MYSQL_USER"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'zzyy'")]),t._v(" \n      MYSQL_PASSWORD"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'zzyy123'")]),t._v(" \n    ports"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n       "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3306:3306"')]),t._v(" \n    volumes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n       "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" /app/mysql/db"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("/var/lib/mysql \n       "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" /app/mysql/conf/my.cnf"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("/etc/my.cnf \n       "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" /app/mysql/init"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("/docker"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("entrypoint"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("initdb.d \n    networks"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" atguigu_net \n    command"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("default"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("authentication"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("plugin=mysql_native_password "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#解决外部无法访问 ")]),t._v("\n  \n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("networks")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("  \n   atguigu_net"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("  \n")])])]),n("h2",{attrs:{id:"_5-docker容器监控"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-docker容器监控"}},[t._v("#")]),t._v(" 5. Docker容器监控")]),t._v(" "),n("p",[t._v("CAdvisor + InfluxDB + Granfana")]),t._v(" "),n("h3",{attrs:{id:"_5-1-原生命令"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-原生命令"}},[t._v("#")]),t._v(" 5.1 原生命令")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" stats \n")])])]),n("p",[n("strong",[t._v("问题")])]),t._v(" "),n("p",[t._v("通过docker stats命令可以很方便的看到当前宿主机上所有容器的CPU，内存以及网络流量等数据， 一般小公司够用了。。。")]),t._v(" "),n("p",[t._v("但是docker stats统计结果只能是当前宿主机的全部容器，数据资料是实时的，没有地方存储、没有健康指标过线预警等功能")]),t._v(" "),n("h3",{attrs:{id:"_5-2-是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-是什么"}},[t._v("#")]),t._v(" 5.2 是什么")]),t._v(" "),n("p",[t._v("容器监控3剑客")]),t._v(" "),n("blockquote",[n("p",[t._v("CAdvisor监控收集 + InfluxDB存储数据 + Granfana展示图表")])]),t._v(" "),n("h4",{attrs:{id:"_5-2-1-cadvisor"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-1-cadvisor"}},[t._v("#")]),t._v(" 5.2.1 CAdvisor")]),t._v(" "),n("img",{staticStyle:{zoom:"40%"},attrs:{src:a(465)}}),t._v(" "),n("br"),t._v(" "),n("h4",{attrs:{id:"_5-2-2-influxdb"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-2-influxdb"}},[t._v("#")]),t._v(" 5.2.2 InfluxDB")]),t._v(" "),n("img",{staticStyle:{zoom:"40%"},attrs:{src:a(466)}}),t._v(" "),n("br"),t._v(" "),n("h4",{attrs:{id:"_5-2-3-granfana"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-3-granfana"}},[t._v("#")]),t._v(" 5.2.3 Granfana")]),t._v(" "),n("img",{staticStyle:{zoom:"40%"},attrs:{src:a(467)}}),t._v(" "),n("br"),t._v(" "),n("h3",{attrs:{id:"_5-3-部署"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-部署"}},[t._v("#")]),t._v(" 5.3 部署")]),t._v(" "),n("p",[t._v("一、新建目录")]),t._v(" "),n("p",[t._v("二、新建3件套组合的 docker-compose.yml")]),t._v(" "),n("div",{staticClass:"language-yaml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-yaml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("version")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'3.1'")]),t._v(" \n  \n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("volumes")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n  grafana_data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n  \n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("services")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n influxdb"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n  image"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" tutum/influxdb"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.9")]),t._v(" \n  restart"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" always \n  environment"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" PRE_CREATE_DB=cadvisor \n  ports"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"8083:8083"')]),t._v(" \n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"8086:8086"')]),t._v(" \n  volumes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" ./data/influxdb"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("/data \n  \n cadvisor"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n  image"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" google/cadvisor \n  links"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" influxdb"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("influxsrv \n  command"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("storage_driver=influxdb "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("storage_driver_db=cadvisor "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("storage_driver_host=influxsrv"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8086")]),t._v(" \n  restart"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" always \n  ports"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"8080:8080"')]),t._v(" \n  volumes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" /"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("/rootfs"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("ro \n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" /var/run"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("/var/run"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("rw \n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" /sys"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("/sys"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("ro \n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" /var/lib/docker/"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("/var/lib/docker"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("ro \n  \n grafana"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n  user"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"104"')]),t._v(" \n  image"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" grafana/grafana \n  user"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"104"')]),t._v(" \n  restart"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" always \n  links"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" influxdb"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("influxsrv \n  ports"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3000:3000"')]),t._v(" \n  volumes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" grafana_data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("/var/lib/grafana \n  environment"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" HTTP_USER=admin \n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" HTTP_PASS=admin \n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" INFLUXDB_HOST=influxsrv \n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" INFLUXDB_PORT=8086 \n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" INFLUXDB_NAME=cadvisor \n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" INFLUXDB_USER=root \n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" INFLUXDB_PASS=root \n")])])]),n("p",[t._v("三、启动docker-compose文件")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" up\n")])])]),n("p",[t._v("四、查看三个服务容器是否启动")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v("\n")])])]),n("p",[t._v("五、测试")]),t._v(" "),n("ol",[n("li",[t._v("浏览cAdvisor收集服务，http://ip:8080/")])]),t._v(" "),n("p",[t._v("第一次访问慢，请稍等")]),t._v(" "),n("p",[t._v("cadvisor也有基础的图形展现功能，这里主要用它来作数据采集")]),t._v(" "),n("br"),t._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[t._v("浏览influxdb存储服务，http://ip:8083/")])]),t._v(" "),n("br"),t._v(" "),n("ol",{attrs:{start:"3"}},[n("li",[t._v("浏览grafana展现服务，http://ip:3000")])]),t._v(" "),n("blockquote",[n("p",[t._v("ip+3000端口的方式访问，默认帐户密码（admin/admin）")]),t._v(" "),n("br"),t._v(" "),n("p",[n("strong",[t._v("配置步骤")])]),t._v(" "),n("ol",[n("li",[t._v("配置数据源")]),t._v(" "),n("li",[t._v("选择influxdb数据源")]),t._v(" "),n("li",[t._v("配置细节")]),t._v(" "),n("li",[t._v("配置面板panel")]),t._v(" "),n("li",[t._v("到这里cAdvisor+InfluxDB+Grafana容器监控系统就部署完成了")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);