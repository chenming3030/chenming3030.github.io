(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{430:function(t,s,a){t.exports=a.p+"assets/img/090.8366ed47.jpg"},431:function(t,s,a){t.exports=a.p+"assets/img/091.823aa4c0.jpg"},432:function(t,s,a){t.exports=a.p+"assets/img/092.730a9478.jpg"},433:function(t,s,a){t.exports=a.p+"assets/img/093.f7cd7e76.jpg"},434:function(t,s,a){t.exports=a.p+"assets/img/094.170034bc.jpg"},435:function(t,s,a){t.exports=a.p+"assets/img/095.268e1b0e.jpg"},436:function(t,s,a){t.exports=a.p+"assets/img/096.cea57983.jpg"},437:function(t,s,a){t.exports=a.p+"assets/img/097.03e823b0.jpg"},438:function(t,s,a){t.exports=a.p+"assets/img/098.40dd3174.jpg"},439:function(t,s,a){t.exports=a.p+"assets/img/099.56d42f75.jpg"},440:function(t,s,a){t.exports=a.p+"assets/img/100.dd8ad397.jpg"},779:function(t,s,a){"use strict";a.r(s);var e=a(65),_=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"git教程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git教程"}},[t._v("#")]),t._v(" Git教程")]),t._v(" "),e("h2",{attrs:{id:"_1-git环境配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-git环境配置"}},[t._v("#")]),t._v(" 1. Git环境配置")]),t._v(" "),e("h3",{attrs:{id:"_1-1-下载与安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-下载与安装"}},[t._v("#")]),t._v(" 1.1 下载与安装")]),t._v(" "),e("p",[t._v("下载地址："),e("code",[t._v("https://git-scm.com/download")])]),t._v(" "),e("img",{attrs:{height:"200px",src:a(430)}}),t._v(" "),e("br"),t._v(" "),e("br"),t._v(" "),e("p",[t._v("下载完成后可以得到安装文件：")]),t._v(" "),e("p",[e("code",[t._v("Git-2.37.1-64-bit.exe")])]),t._v(" "),e("br"),t._v(" "),e("br"),t._v(" "),e("p",[t._v("双击下载的安装文件来安装Git。安装完成后在电脑桌面（也可以是其他目录）点击右键，如果能够看到如下两个菜单则说明Git安装成功。")]),t._v(" "),e("img",{attrs:{height:"300px",src:a(431)}}),t._v(" "),e("p",[t._v("备注")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("Git GUI")]),t._v("：Git提供的图形界面工具")]),t._v(" "),e("li",[e("strong",[t._v("Git Bash")]),t._v("：Git提供的命令行工具")])]),t._v(" "),e("p",[t._v("当安装Git后首先要做的事情是设置用户名称和email地址。这是非常重要的，因为每次Git提交都会使用该用户信息。")]),t._v(" "),e("br"),t._v(" "),e("h3",{attrs:{id:"_1-2-基本配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-基本配置"}},[t._v("#")]),t._v(" 1.2 基本配置")]),t._v(" "),e("ol",[e("li",[t._v("打开 Git Bash")]),t._v(" "),e("li",[t._v("设置用户信息")])]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global user.name "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"itcast"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global user.email "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello@itcast.cn"')]),t._v("\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[t._v("查看配置信息")])]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global user.name\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global user.email\n")])])]),e("h3",{attrs:{id:"_1-3-为常用指令配置别名-可选"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-为常用指令配置别名-可选"}},[t._v("#")]),t._v(" 1.3 为常用指令配置别名（可选）")]),t._v(" "),e("p",[t._v("有些常用的指令参数非常多，每次都要输入好多参数，我们可以使用别名。")]),t._v(" "),e("ol",[e("li",[t._v("打开用户目录，创建 "),e("code",[t._v(".bashrc")]),t._v(" 文件")])]),t._v(" "),e("p",[t._v("部分windows系统不允许用户创建点号开头的文件，可以打开 gitBash，执行 "),e("code",[t._v("touch ~/.bashrc")])]),t._v(" "),e("img",{attrs:{height:"130px",src:a(432)}}),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("在 "),e("code",[t._v(".bashrc")]),t._v(" 文件中输入如下内容")])]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#用于输出git提交日志")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("alias")]),t._v(" git-log"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'git log --pretty=oneline --all --graph --abbrev-commit'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#用于输出当前目录所有文件及基本信息")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("alias")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("ll")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ls -al'")]),t._v("\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[t._v("打开gitBash，执行 "),e("code",[t._v("source ~/.bashrc")])])]),t._v(" "),e("img",{attrs:{height:"90px",src:a(433)}}),t._v(" "),e("br"),t._v(" "),e("br"),t._v(" "),e("h3",{attrs:{id:"_1-4-解决gitbash乱码问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-解决gitbash乱码问题"}},[t._v("#")]),t._v(" 1.4 解决GitBash乱码问题")]),t._v(" "),e("ol",[e("li",[t._v("打开 GitBash 执行下面命令")])]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global core.quotepath "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[e("code",[t._v("${git_home}/etc/bash.bashrc")]),t._v(" 文件最后加入下面两行")])]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("LANG")])]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"zh_CN.UTF-8"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("LC_ALL")])]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"zh_CN.UTF-8"')]),t._v("\n")])])]),e("h2",{attrs:{id:"_2-创建本地仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-创建本地仓库"}},[t._v("#")]),t._v(" 2. 创建本地仓库")]),t._v(" "),e("p",[t._v("要使用 Git 对我们的代码进行版本控制，首先需要获得本地仓库")]),t._v(" "),e("ol",[e("li",[t._v("在电脑的任意位置创建一个空目录（例如test）作为我们的本地Git仓库")]),t._v(" "),e("li",[t._v("进入这个目录中，点击右键打开Git bash窗口")]),t._v(" "),e("li",[t._v("执行命令 git init")]),t._v(" "),e("li",[t._v("如果创建成功后可在文件夹下看到隐藏的.git目录")])]),t._v(" "),e("img",{attrs:{height:"160px",src:a(434)}}),t._v(" "),e("h2",{attrs:{id:"_3-基础操作指令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-基础操作指令"}},[t._v("#")]),t._v(" 3. 基础操作指令")]),t._v(" "),e("p",[t._v("Git工作目录下对于文件的修改(增加、删除、更新)会存在几个状态，这些修改的状态会随着我们执行 Git 的命令而发生变化。")]),t._v(" "),e("img",{attrs:{height:"240px",src:a(435)}}),t._v(" "),e("br"),t._v(" "),e("p",[t._v("本章节主要讲解如何使用命令来控制这些状态之间的转换：")]),t._v(" "),e("ol",[e("li",[t._v("git add (工作区 --\x3e 暂存区)")]),t._v(" "),e("li",[t._v("git commit (暂存区 --\x3e 本地仓库)")])]),t._v(" "),e("h3",{attrs:{id:"_3-1-查看修改的状态-status"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-查看修改的状态-status"}},[t._v("#")]),t._v(" 3.1 查看修改的状态(status)")]),t._v(" "),e("ul",[e("li",[t._v("作用：查看的修改的状态（暂存区、工作区）")]),t._v(" "),e("li",[t._v("命令形式："),e("code",[t._v("git status")])])]),t._v(" "),e("h3",{attrs:{id:"_3-2-添加工作区到暂存区-add"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-添加工作区到暂存区-add"}},[t._v("#")]),t._v(" 3.2 添加工作区到暂存区(add)")]),t._v(" "),e("ul",[e("li",[t._v("作用：添加工作区一个或多个文件的修改到暂存区")]),t._v(" "),e("li",[t._v("命令形式："),e("code",[t._v("git add 单个文件名|通配符")]),t._v(" "),e("ul",[e("li",[t._v("将所有修改加入暂存区："),e("code",[t._v("git add .")])])])])]),t._v(" "),e("h3",{attrs:{id:"_3-3-提交暂存区到本地仓库-commit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-提交暂存区到本地仓库-commit"}},[t._v("#")]),t._v(" 3.3 提交暂存区到本地仓库(commit)")]),t._v(" "),e("ul",[e("li",[t._v("作用：提交暂存区内容到本地仓库的当前分支")]),t._v(" "),e("li",[t._v("命令形式："),e("code",[t._v("git commit -m '注释内容'")])])]),t._v(" "),e("h3",{attrs:{id:"_3-4-查看提交日志-log"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-查看提交日志-log"}},[t._v("#")]),t._v(" 3.4 查看提交日志(log)")]),t._v(" "),e("p",[t._v("在 1.3 中配置的别名 git-log 就包含了这些参数，所以后续可以直接使用指令 "),e("code",[t._v("git-log")])]),t._v(" "),e("ul",[e("li",[t._v("作用：查看提交记录")]),t._v(" "),e("li",[t._v("命令形式："),e("code",[t._v("git log [option]")]),t._v(" "),e("ul",[e("li",[t._v("options\n"),e("ul",[e("li",[t._v("--all 显示所有分支")]),t._v(" "),e("li",[t._v("--pretty=oneline 将提交信息显示为一行")]),t._v(" "),e("li",[t._v("--abbrev-commit 使得输出的commitId更简短")]),t._v(" "),e("li",[t._v("--graph 以图的形式显示")])])])])])]),t._v(" "),e("h3",{attrs:{id:"_3-5-版本回退"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-版本回退"}},[t._v("#")]),t._v(" 3.5 版本回退")]),t._v(" "),e("ul",[e("li",[t._v("作用：版本切换")]),t._v(" "),e("li",[t._v("命令形式："),e("code",[t._v("git reset --hard commitID")]),t._v(" "),e("ul",[e("li",[t._v("commitID 可以使用 "),e("code",[t._v("git-log")]),t._v(" 或 "),e("code",[t._v("git log")]),t._v(" 指令查看")])])]),t._v(" "),e("li",[t._v("如何查看已经删除的记录？\n"),e("ul",[e("li",[t._v("git reflog")]),t._v(" "),e("li",[t._v("这个指令可以看到已经删除的提交记录")])])])]),t._v(" "),e("h3",{attrs:{id:"_3-6-添加文件至忽略列表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-添加文件至忽略列表"}},[t._v("#")]),t._v(" 3.6 添加文件至忽略列表")]),t._v(" "),e("p",[t._v("一般我们总会有些文件无需纳入Git 的管理，也不希望它们总出现在未跟踪文件列表。 通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。 在这种情况下，我们可以在工作目录中创建一个名为 "),e("code",[t._v(".gitignore")]),t._v(" 的文件（文件名称固定），列出要忽略的文件模式。下面是一个示例：")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# no .a files")]),t._v("\n*.a\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# but do track lib.a, even though you're ignoring .a files above")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("lib.a\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# only ignore the TODO file in the current directory, not subdir/TODO")]),t._v("\n/TODO\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ignore all files in the build/ directory")]),t._v("\nbuild/\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ignore doc/notes.txt, but not doc/server/arch.txt")]),t._v("\ndoc/*.txt\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ignore all .pdf files in the doc/ directory")]),t._v("\ndoc/**/*.pdf\n")])])]),e("h3",{attrs:{id:"_3-7-练习-基础操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-练习-基础操作"}},[t._v("#")]),t._v(" 3.7 练习:基础操作")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#####################仓库初始化######################")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建目录（git_test01）并在目录下打开gitbash")]),t._v("\n略\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 初始化git仓库")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#####################创建文件并提交#####################")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 目录下创建文件 file01.txt")]),t._v("\n略\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将修改加入暂存区")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将修改提交到本地仓库，提交记录内容为：commit 001")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'commit 001'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看日志")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("####################修改文件并提交######################")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 修改file01的内容为：count=1")]),t._v("\n略\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将修改加入暂存区")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# # 将修改提交到本地仓库，提交记录内容为：update file01")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit --m "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'update file01'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看日志")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 以精简的方式显示提交记录")]),t._v("\ngit-log\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("####################将最后一次修改还原##################")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看提交记录")]),t._v("\ngit-log\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 找到倒数第2次提交的commitID")]),t._v("\n略\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 版本回退")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset commitID --hard\n")])])]),e("h2",{attrs:{id:"_4-分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-分支"}},[t._v("#")]),t._v(" 4. 分支")]),t._v(" "),e("p",[t._v("几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离开来进行重大的Bug修改、开发新的功能，以免影响开发主线。")]),t._v(" "),e("h3",{attrs:{id:"_4-1-查看本地分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-查看本地分支"}},[t._v("#")]),t._v(" 4.1 查看本地分支")]),t._v(" "),e("ul",[e("li",[t._v("命令："),e("code",[t._v("git branch")])])]),t._v(" "),e("h3",{attrs:{id:"_4-2-创建本地分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-创建本地分支"}},[t._v("#")]),t._v(" 4.2 创建本地分支")]),t._v(" "),e("ul",[e("li",[t._v("命令："),e("code",[t._v("git branch 分支名")])])]),t._v(" "),e("h3",{attrs:{id:"_4-3-切换分支-checkout"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-切换分支-checkout"}},[t._v("#")]),t._v(" 4.3 切换分支(checkout)")]),t._v(" "),e("ul",[e("li",[t._v("命令："),e("code",[t._v("git checkout 分支名")])])]),t._v(" "),e("p",[t._v("我们还可以直接切换到一个不存在的分支（创建并切换）")]),t._v(" "),e("ul",[e("li",[t._v("命令："),e("code",[t._v("git checkout -b 分支名")])])]),t._v(" "),e("h3",{attrs:{id:"_4-4-合并分支-merge"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-合并分支-merge"}},[t._v("#")]),t._v(" 4.4 合并分支(merge)")]),t._v(" "),e("p",[t._v("一个分支上的提交可以合并到另一个分支")]),t._v(" "),e("ul",[e("li",[t._v("命令："),e("code",[t._v("git merge 分支名称")])])]),t._v(" "),e("h3",{attrs:{id:"_4-5-删除分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-删除分支"}},[t._v("#")]),t._v(" 4.5 删除分支")]),t._v(" "),e("p",[t._v("不能删除当前分支，只能删除其他分支")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("git branch -d b1")]),t._v("  删除分支时，需要做各种检查")]),t._v(" "),e("li",[e("code",[t._v("git branch -D b1")]),t._v("  不做任何检查，强制删除")])]),t._v(" "),e("h3",{attrs:{id:"_4-6-解决冲突"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-6-解决冲突"}},[t._v("#")]),t._v(" 4.6 解决冲突")]),t._v(" "),e("p",[t._v("当两个分支上对文件的修改可能会存在冲突，例如同时修改了同一个文件的同一行，这时就需要手动解决冲突，解决冲突步骤如下：")]),t._v(" "),e("ol",[e("li",[t._v("处理文件中冲突的地方")]),t._v(" "),e("li",[t._v("将解决完冲突的文件加入暂存区(add)")]),t._v(" "),e("li",[t._v("提交到仓库(commit)")])]),t._v(" "),e("p",[t._v("冲突部分的内容处理如下所示：")]),t._v(" "),e("img",{attrs:{height:"380px",src:a(436)}}),t._v(" "),e("br"),t._v(" "),e("br"),t._v(" "),e("br"),t._v(" "),e("h3",{attrs:{id:"_4-7-开发中分支使用原则与流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-7-开发中分支使用原则与流程"}},[t._v("#")]),t._v(" 4.7 开发中分支使用原则与流程")]),t._v(" "),e("p",[t._v("几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离开来进行重大的Bug修改、开发新的功能，以免影响开发主线。")]),t._v(" "),e("p",[t._v("在开发中，一般有如下分支使用原则与流程：")]),t._v(" "),e("ul",[e("li",[e("p",[e("strong",[t._v("master （生产） 分支")])]),t._v(" "),e("p",[t._v("线上分支，主分支，中小规模项目作为线上运行的应用对应的分支")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("develop（开发）分支")])]),t._v(" "),e("p",[t._v("是从master创建的分支，一般作为开发部门的主要开发分支，如果没有其他并行开发不同期上线要求，都可以在此版本进行开发，阶段开发完成后，需要是合并到master分支，准备上线")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("feature/xxxx分支")])]),t._v(" "),e("p",[t._v("从develop创建的分支，一般是同期并行开发，但不同期上线时创建的分支，分支上的研发任务完成后合并到develop分支")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("hotfix/xxxx分支")])]),t._v(" "),e("p",[t._v("从master派生的分支，一般作为线上bug修复使用，修复完成后需要合并到master、test、develop分支")])]),t._v(" "),e("li",[e("p",[t._v("还有一些其他分支，在此不再详述，例如 test分支（用于代码测试）、pre分支（预上线分支）等等")])])]),t._v(" "),e("img",{attrs:{height:"480px",src:a(437)}}),t._v(" "),e("h3",{attrs:{id:"_4-8-练习-分支操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-8-练习-分支操作"}},[t._v("#")]),t._v(" 4.8 练习:分支操作")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("###########################创建并切换到dev01分支，在dev01分支提交")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [master]创建分支dev01")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch dev01\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [master]切换到dev01")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout dev01\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [dev01]创建文件file02.txt")]),t._v("\n略\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [dev01]将修改加入暂存区并提交到仓库,提交记录内容为：add file02 on dev")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'add file02 on dev'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [dev01]以精简的方式显示提交记录")]),t._v("\ngit-log\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("###########################切换到master分支，将dev01合并到master分支")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [dev01]切换到master分支")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout master\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [master]合并dev01到master分支")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge dev01\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [master]以精简的方式显示提交记录")]),t._v("\ngit-log\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [master]查看文件变化(目录下也出现了file02.txt)")]),t._v("\n略\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##########################删除dev01分支")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [master]删除dev01分支")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -d dev01\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [master]以精简的方式显示提交记录")]),t._v("\ngit-log\n")])])]),e("h2",{attrs:{id:"_5-远程仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-远程仓库"}},[t._v("#")]),t._v(" 5. 远程仓库")]),t._v(" "),e("h3",{attrs:{id:"_5-1-常用的托管服务-远程仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-常用的托管服务-远程仓库"}},[t._v("#")]),t._v(" 5.1 常用的托管服务[远程仓库]")]),t._v(" "),e("p",[t._v("前面我们已经知道了Git中存在两种类型的仓库，即本地仓库和远程仓库。")]),t._v(" "),e("p",[t._v("那么我们如何搭建Git远程仓库呢？我们可以借助互联网上提供的一些代码托管服务来实现，其中比较常用的有GitHub、码云、GitLab等。")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("GitHub")]),t._v("（ 地址：https://github.com/ ）是一个面向开源及私有软件项目的托管平台，因为只支持 Git 作为唯一的版本库格式进行托管，故名GitHub")]),t._v(" "),e("li",[e("code",[t._v("码云")]),t._v("（地址： https://gitee.com/ ）是国内的一个代码托管平台，由于服务器在国内，所以相比于 GitHub，码云速度会更快")]),t._v(" "),e("li",[e("code",[t._v("GitLab")]),t._v(" （地址： https://about.gitlab.com/ ）是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务，一般用于在企业、学校等内部网络搭建git私服")])]),t._v(" "),e("h3",{attrs:{id:"_5-2-操作远程仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-操作远程仓库"}},[t._v("#")]),t._v(" 5.2 操作远程仓库")]),t._v(" "),e("h4",{attrs:{id:"_5-2-1-添加远程仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-1-添加远程仓库"}},[t._v("#")]),t._v(" 5.2.1 添加远程仓库")]),t._v(" "),e("p",[t._v("此操作是先初始化本地库，然后与已创建的远程库进行对接。")]),t._v(" "),e("ul",[e("li",[t._v("命令： "),e("code",[t._v("git remote add <远端名称> <仓库路径>")]),t._v(" "),e("ul",[e("li",[t._v("远端名称，默认是origin，取决于远端服务器设置")]),t._v(" "),e("li",[t._v("仓库路径，从远端服务器获取此URL")]),t._v(" "),e("li",[t._v("例如: "),e("code",[t._v("git remote add origin git@gitee.com:czbk_zhang_meng/git_test.git")])])])])]),t._v(" "),e("h4",{attrs:{id:"_5-2-2-查看远程仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-2-查看远程仓库"}},[t._v("#")]),t._v(" 5.2.2 查看远程仓库")]),t._v(" "),e("ul",[e("li",[t._v("命令："),e("code",[t._v("git remote")])])]),t._v(" "),e("img",{attrs:{height:"50px",src:a(438)}}),t._v(" "),e("h4",{attrs:{id:"_5-2-3-推送到远程仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-3-推送到远程仓库"}},[t._v("#")]),t._v(" 5.2.3 推送到远程仓库")]),t._v(" "),e("ul",[e("li",[t._v("命令："),e("code",[t._v("git push [-f][--set-upstream] [远端名称 [本地分支名][:远端分支名]]")]),t._v(" "),e("ul",[e("li",[t._v("如果远程分支名和本地分支名称相同，则可以只写本地分支\n"),e("ul",[e("li",[e("code",[t._v("git push origin master")])])])]),t._v(" "),e("li",[e("code",[t._v("-f")]),t._v(" 表示强制覆盖")]),t._v(" "),e("li",[e("code",[t._v("--set-upstream")]),t._v(" 推送到远端的同时并且建立起和远端分支的关联关系\n"),e("ul",[e("li",[e("code",[t._v("git push --set-upstream origin master")])])])]),t._v(" "),e("li",[t._v("如果"),e("strong",[t._v("当前分支已经和远端分支关联")]),t._v("，则可以省略分支名和远端名。\n"),e("ul",[e("li",[e("code",[t._v("git push")]),t._v(" 将master分支推送到已关联的远端分支")])])])])])]),t._v(" "),e("h4",{attrs:{id:"_5-2-4-本地分支与远程分支的关联关系"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-4-本地分支与远程分支的关联关系"}},[t._v("#")]),t._v(" 5.2.4 本地分支与远程分支的关联关系")]),t._v(" "),e("ul",[e("li",[t._v("查看关联关系我们可以使用 "),e("code",[t._v("git branch -vv")]),t._v(" 命令")])]),t._v(" "),e("img",{attrs:{height:"60px",src:a(439)}}),t._v(" "),e("br"),t._v(" "),e("br"),t._v(" "),e("h3",{attrs:{id:"_5-2-5-从远程仓库克隆"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-5-从远程仓库克隆"}},[t._v("#")]),t._v(" 5.2.5 从远程仓库克隆")]),t._v(" "),e("p",[t._v("如果已经有一个远端仓库，我们可以直接clone到本地。")]),t._v(" "),e("ul",[e("li",[t._v("命令: "),e("code",[t._v("git clone <仓库路径> [本地目录]")]),t._v(" "),e("ul",[e("li",[t._v("本地目录可以省略，会自动生成一个目录")])])])]),t._v(" "),e("h4",{attrs:{id:"_5-2-6-从远程仓库中抓取和拉取"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-6-从远程仓库中抓取和拉取"}},[t._v("#")]),t._v(" 5.2.6 从远程仓库中抓取和拉取")]),t._v(" "),e("p",[t._v("远程分支和本地的分支一样，我们可以进行merge操作，只是需要先把远端仓库里的更新都下载到本地，再进行操作。")]),t._v(" "),e("ul",[e("li",[t._v("抓取命令："),e("code",[t._v("git fetch [remote name][branch name]")]),t._v(" "),e("ul",[e("li",[t._v("抓取指令就是将仓库里的更新都抓取到本地，不会进行合并")]),t._v(" "),e("li",[t._v("如果不指定远端名称和分支名，则抓取所有分支")])])]),t._v(" "),e("li",[t._v("拉取命令："),e("code",[t._v("git pull [remote name][branch name]")]),t._v(" "),e("ul",[e("li",[t._v("拉取指令就是将远端仓库的修改拉到本地并自动进行合并，等同于fetch+merge")]),t._v(" "),e("li",[t._v("如果不指定远端名称和分支名，则抓取所有并更新当前分支")])])])]),t._v(" "),e("h4",{attrs:{id:"_5-2-7-解决合并冲突"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-7-解决合并冲突"}},[t._v("#")]),t._v(" 5.2.7 解决合并冲突")]),t._v(" "),e("p",[t._v("在一段时间，A、B用户修改了同一个文件，且修改了同一行位置的代码，此时会发生合并冲突。")]),t._v(" "),e("p",[t._v("A用户在本地修改代码后优先推送到远程仓库，此时B用户在本地修订代码，提交到本地仓库后，也需要推送到远程仓库，此时B用户晚于A用户，故需要先拉取远程仓库的提交，经过合并后才能推送到远端分支，如下图所示。")]),t._v(" "),e("img",{attrs:{height:"200px",src:a(440)}}),t._v(" "),e("br"),t._v(" "),e("p",[t._v("在B用户拉取代码时，因为A、B用户同一段时间修改了同一个文件的相同位置代码，故会发生合并冲突。")]),t._v(" "),e("p",[e("strong",[t._v("远程分支也是分支，所以合并时冲突的解决方式也和解决本地分支冲突相同相同，在此不再赘述。")])]),t._v(" "),e("h2",{attrs:{id:"_6-注意事项"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-注意事项"}},[t._v("#")]),t._v(" 6. 注意事项")]),t._v(" "),e("ol",[e("li",[t._v("切换分支前先提交本地的修改")]),t._v(" "),e("li",[t._v("代码及时提交，提交过了就不会丢")])]),t._v(" "),e("h2",{attrs:{id:"_7-gui工具"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-gui工具"}},[t._v("#")]),t._v(" 7. GUI工具")]),t._v(" "),e("p",[t._v("Git有很多图形界面工具，这里我们推荐 "),e("code",[t._v("SourceTree")]),t._v("，它是由 Atlassian (https://www.atlassian.com/)开发的免费Git图形界面工具，可以操作任何Git库。")])])}),[],!1,null,null,null);s.default=_.exports}}]);